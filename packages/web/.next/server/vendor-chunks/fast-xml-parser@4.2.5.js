/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fast-xml-parser@4.2.5";
exports.ids = ["vendor-chunks/fast-xml-parser@4.2.5"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/fxp.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/fxp.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst validator = __webpack_require__(/*! ./validator */ \"(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/validator.js\");\nconst XMLParser = __webpack_require__(/*! ./xmlparser/XMLParser */ \"(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js\");\nconst XMLBuilder = __webpack_require__(/*! ./xmlbuilder/json2xml */ \"(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js\");\nmodule.exports = {\n    XMLParser: XMLParser,\n    XMLValidator: validator,\n    XMLBuilder: XMLBuilder\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2Zhc3QteG1sLXBhcnNlckA0LjIuNS9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy9meHAuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxZQUFZQyxtQkFBT0EsQ0FBQztBQUMxQixNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQztBQUMxQixNQUFNRSxhQUFhRixtQkFBT0EsQ0FBQztBQUUzQkcsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZILFdBQVdBO0lBQ1hJLGNBQWNOO0lBQ2RHLFlBQVlBO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2Zhc3QteG1sLXBhcnNlckA0LjIuNS9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy9meHAuanM/NmVlMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHZhbGlkYXRvciA9IHJlcXVpcmUoJy4vdmFsaWRhdG9yJyk7XG5jb25zdCBYTUxQYXJzZXIgPSByZXF1aXJlKCcuL3htbHBhcnNlci9YTUxQYXJzZXInKTtcbmNvbnN0IFhNTEJ1aWxkZXIgPSByZXF1aXJlKCcuL3htbGJ1aWxkZXIvanNvbjJ4bWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFhNTFBhcnNlcjogWE1MUGFyc2VyLFxuICBYTUxWYWxpZGF0b3I6IHZhbGlkYXRvcixcbiAgWE1MQnVpbGRlcjogWE1MQnVpbGRlclxufSJdLCJuYW1lcyI6WyJ2YWxpZGF0b3IiLCJyZXF1aXJlIiwiWE1MUGFyc2VyIiwiWE1MQnVpbGRlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJYTUxWYWxpZGF0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/fxp.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/util.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/util.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nconst nameStartChar = \":A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\nconst nameChar = nameStartChar + \"\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\nconst nameRegexp = \"[\" + nameStartChar + \"][\" + nameChar + \"]*\";\nconst regexName = new RegExp(\"^\" + nameRegexp + \"$\");\nconst getAllMatches = function(string, regex) {\n    const matches = [];\n    let match = regex.exec(string);\n    while(match){\n        const allmatches = [];\n        allmatches.startIndex = regex.lastIndex - match[0].length;\n        const len = match.length;\n        for(let index = 0; index < len; index++){\n            allmatches.push(match[index]);\n        }\n        matches.push(allmatches);\n        match = regex.exec(string);\n    }\n    return matches;\n};\nconst isName = function(string) {\n    const match = regexName.exec(string);\n    return !(match === null || typeof match === \"undefined\");\n};\nexports.isExist = function(v) {\n    return typeof v !== \"undefined\";\n};\nexports.isEmptyObject = function(obj) {\n    return Object.keys(obj).length === 0;\n};\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */ exports.merge = function(target, a, arrayMode) {\n    if (a) {\n        const keys = Object.keys(a); // will return an array of own properties\n        const len = keys.length; //don't make it inline\n        for(let i = 0; i < len; i++){\n            if (arrayMode === \"strict\") {\n                target[keys[i]] = [\n                    a[keys[i]]\n                ];\n            } else {\n                target[keys[i]] = a[keys[i]];\n            }\n        }\n    }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */ exports.getValue = function(v) {\n    if (exports.isExist(v)) {\n        return v;\n    } else {\n        return \"\";\n    }\n};\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2Zhc3QteG1sLXBhcnNlckA0LjIuNS9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsZ0JBQWdCO0FBQ3RCLE1BQU1DLFdBQVdELGdCQUFnQjtBQUNqQyxNQUFNRSxhQUFhLE1BQU1GLGdCQUFnQixPQUFPQyxXQUFXO0FBQzNELE1BQU1FLFlBQVksSUFBSUMsT0FBTyxNQUFNRixhQUFhO0FBRWhELE1BQU1HLGdCQUFnQixTQUFTQyxNQUFNLEVBQUVDLEtBQUs7SUFDMUMsTUFBTUMsVUFBVSxFQUFFO0lBQ2xCLElBQUlDLFFBQVFGLE1BQU1HLElBQUksQ0FBQ0o7SUFDdkIsTUFBT0csTUFBTztRQUNaLE1BQU1FLGFBQWEsRUFBRTtRQUNyQkEsV0FBV0MsVUFBVSxHQUFHTCxNQUFNTSxTQUFTLEdBQUdKLEtBQUssQ0FBQyxFQUFFLENBQUNLLE1BQU07UUFDekQsTUFBTUMsTUFBTU4sTUFBTUssTUFBTTtRQUN4QixJQUFLLElBQUlFLFFBQVEsR0FBR0EsUUFBUUQsS0FBS0MsUUFBUztZQUN4Q0wsV0FBV00sSUFBSSxDQUFDUixLQUFLLENBQUNPLE1BQU07UUFDOUI7UUFDQVIsUUFBUVMsSUFBSSxDQUFDTjtRQUNiRixRQUFRRixNQUFNRyxJQUFJLENBQUNKO0lBQ3JCO0lBQ0EsT0FBT0U7QUFDVDtBQUVBLE1BQU1VLFNBQVMsU0FBU1osTUFBTTtJQUM1QixNQUFNRyxRQUFRTixVQUFVTyxJQUFJLENBQUNKO0lBQzdCLE9BQU8sQ0FBRUcsQ0FBQUEsVUFBVSxRQUFRLE9BQU9BLFVBQVUsV0FBVTtBQUN4RDtBQUVBVSxlQUFlLEdBQUcsU0FBU0UsQ0FBQztJQUMxQixPQUFPLE9BQU9BLE1BQU07QUFDdEI7QUFFQUYscUJBQXFCLEdBQUcsU0FBU0ksR0FBRztJQUNsQyxPQUFPQyxPQUFPQyxJQUFJLENBQUNGLEtBQUtULE1BQU0sS0FBSztBQUNyQztBQUVBOzs7O0NBSUMsR0FDREssYUFBYSxHQUFHLFNBQVNRLE1BQU0sRUFBRUMsQ0FBQyxFQUFFQyxTQUFTO0lBQzNDLElBQUlELEdBQUc7UUFDTCxNQUFNSCxPQUFPRCxPQUFPQyxJQUFJLENBQUNHLElBQUkseUNBQXlDO1FBQ3RFLE1BQU1iLE1BQU1VLEtBQUtYLE1BQU0sRUFBRSxzQkFBc0I7UUFDL0MsSUFBSyxJQUFJZ0IsSUFBSSxHQUFHQSxJQUFJZixLQUFLZSxJQUFLO1lBQzVCLElBQUlELGNBQWMsVUFBVTtnQkFDMUJGLE1BQU0sQ0FBQ0YsSUFBSSxDQUFDSyxFQUFFLENBQUMsR0FBRztvQkFBRUYsQ0FBQyxDQUFDSCxJQUFJLENBQUNLLEVBQUUsQ0FBQztpQkFBRTtZQUNsQyxPQUFPO2dCQUNMSCxNQUFNLENBQUNGLElBQUksQ0FBQ0ssRUFBRSxDQUFDLEdBQUdGLENBQUMsQ0FBQ0gsSUFBSSxDQUFDSyxFQUFFLENBQUM7WUFDOUI7UUFDRjtJQUNGO0FBQ0Y7QUFDQTs7RUFFRSxHQUVGWCxnQkFBZ0IsR0FBRyxTQUFTRSxDQUFDO0lBQzNCLElBQUlGLFFBQVFDLE9BQU8sQ0FBQ0MsSUFBSTtRQUN0QixPQUFPQTtJQUNULE9BQU87UUFDTCxPQUFPO0lBQ1Q7QUFDRjtBQUVBLDRDQUE0QztBQUM1QywwQ0FBMEM7QUFFMUNGLGNBQWMsR0FBR0Q7QUFDakJDLHFCQUFxQixHQUFHZDtBQUN4QmMsa0JBQWtCLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZmFzdC14bWwtcGFyc2VyQDQuMi41L25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3V0aWwuanM/YmIxNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5hbWVTdGFydENoYXIgPSAnOkEtWmEtel9cXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRCc7XG5jb25zdCBuYW1lQ2hhciA9IG5hbWVTdGFydENoYXIgKyAnXFxcXC0uXFxcXGRcXFxcdTAwQjdcXFxcdTAzMDAtXFxcXHUwMzZGXFxcXHUyMDNGLVxcXFx1MjA0MCc7XG5jb25zdCBuYW1lUmVnZXhwID0gJ1snICsgbmFtZVN0YXJ0Q2hhciArICddWycgKyBuYW1lQ2hhciArICddKidcbmNvbnN0IHJlZ2V4TmFtZSA9IG5ldyBSZWdFeHAoJ14nICsgbmFtZVJlZ2V4cCArICckJyk7XG5cbmNvbnN0IGdldEFsbE1hdGNoZXMgPSBmdW5jdGlvbihzdHJpbmcsIHJlZ2V4KSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBbXTtcbiAgbGV0IG1hdGNoID0gcmVnZXguZXhlYyhzdHJpbmcpO1xuICB3aGlsZSAobWF0Y2gpIHtcbiAgICBjb25zdCBhbGxtYXRjaGVzID0gW107XG4gICAgYWxsbWF0Y2hlcy5zdGFydEluZGV4ID0gcmVnZXgubGFzdEluZGV4IC0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgIGNvbnN0IGxlbiA9IG1hdGNoLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGVuOyBpbmRleCsrKSB7XG4gICAgICBhbGxtYXRjaGVzLnB1c2gobWF0Y2hbaW5kZXhdKTtcbiAgICB9XG4gICAgbWF0Y2hlcy5wdXNoKGFsbG1hdGNoZXMpO1xuICAgIG1hdGNoID0gcmVnZXguZXhlYyhzdHJpbmcpO1xuICB9XG4gIHJldHVybiBtYXRjaGVzO1xufTtcblxuY29uc3QgaXNOYW1lID0gZnVuY3Rpb24oc3RyaW5nKSB7XG4gIGNvbnN0IG1hdGNoID0gcmVnZXhOYW1lLmV4ZWMoc3RyaW5nKTtcbiAgcmV0dXJuICEobWF0Y2ggPT09IG51bGwgfHwgdHlwZW9mIG1hdGNoID09PSAndW5kZWZpbmVkJyk7XG59O1xuXG5leHBvcnRzLmlzRXhpc3QgPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiB0eXBlb2YgdiAhPT0gJ3VuZGVmaW5lZCc7XG59O1xuXG5leHBvcnRzLmlzRW1wdHlPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufTtcblxuLyoqXG4gKiBDb3B5IGFsbCB0aGUgcHJvcGVydGllcyBvZiBhIGludG8gYi5cbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0XG4gKiBAcGFyYW0geyp9IGFcbiAqL1xuZXhwb3J0cy5tZXJnZSA9IGZ1bmN0aW9uKHRhcmdldCwgYSwgYXJyYXlNb2RlKSB7XG4gIGlmIChhKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGEpOyAvLyB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBvd24gcHJvcGVydGllc1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoOyAvL2Rvbid0IG1ha2UgaXQgaW5saW5lXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGFycmF5TW9kZSA9PT0gJ3N0cmljdCcpIHtcbiAgICAgICAgdGFyZ2V0W2tleXNbaV1dID0gWyBhW2tleXNbaV1dIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRba2V5c1tpXV0gPSBhW2tleXNbaV1dO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbi8qIGV4cG9ydHMubWVyZ2UgPWZ1bmN0aW9uIChiLGEpe1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihiLGEpO1xufSAqL1xuXG5leHBvcnRzLmdldFZhbHVlID0gZnVuY3Rpb24odikge1xuICBpZiAoZXhwb3J0cy5pc0V4aXN0KHYpKSB7XG4gICAgcmV0dXJuIHY7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG4vLyBjb25zdCBmYWtlQ2FsbCA9IGZ1bmN0aW9uKGEpIHtyZXR1cm4gYTt9O1xuLy8gY29uc3QgZmFrZUNhbGxOb1JldHVybiA9IGZ1bmN0aW9uKCkge307XG5cbmV4cG9ydHMuaXNOYW1lID0gaXNOYW1lO1xuZXhwb3J0cy5nZXRBbGxNYXRjaGVzID0gZ2V0QWxsTWF0Y2hlcztcbmV4cG9ydHMubmFtZVJlZ2V4cCA9IG5hbWVSZWdleHA7XG4iXSwibmFtZXMiOlsibmFtZVN0YXJ0Q2hhciIsIm5hbWVDaGFyIiwibmFtZVJlZ2V4cCIsInJlZ2V4TmFtZSIsIlJlZ0V4cCIsImdldEFsbE1hdGNoZXMiLCJzdHJpbmciLCJyZWdleCIsIm1hdGNoZXMiLCJtYXRjaCIsImV4ZWMiLCJhbGxtYXRjaGVzIiwic3RhcnRJbmRleCIsImxhc3RJbmRleCIsImxlbmd0aCIsImxlbiIsImluZGV4IiwicHVzaCIsImlzTmFtZSIsImV4cG9ydHMiLCJpc0V4aXN0IiwidiIsImlzRW1wdHlPYmplY3QiLCJvYmoiLCJPYmplY3QiLCJrZXlzIiwibWVyZ2UiLCJ0YXJnZXQiLCJhIiwiYXJyYXlNb2RlIiwiaSIsImdldFZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/util.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/validator.js":
/*!****************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/validator.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst util = __webpack_require__(/*! ./util */ \"(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/util.js\");\nconst defaultOptions = {\n    allowBooleanAttributes: false,\n    unpairedTags: []\n};\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function(xmlData, options) {\n    options = Object.assign({}, defaultOptions, options);\n    //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n    //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n    //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n    const tags = [];\n    let tagFound = false;\n    //indicates that the root tag has been closed (aka. depth 0 has been reached)\n    let reachedRoot = false;\n    if (xmlData[0] === \"\\uFEFF\") {\n        // check for byte order mark (BOM)\n        xmlData = xmlData.substr(1);\n    }\n    for(let i = 0; i < xmlData.length; i++){\n        if (xmlData[i] === \"<\" && xmlData[i + 1] === \"?\") {\n            i += 2;\n            i = readPI(xmlData, i);\n            if (i.err) return i;\n        } else if (xmlData[i] === \"<\") {\n            //starting of tag\n            //read until you reach to '>' avoiding any '>' in attribute value\n            let tagStartPos = i;\n            i++;\n            if (xmlData[i] === \"!\") {\n                i = readCommentAndCDATA(xmlData, i);\n                continue;\n            } else {\n                let closingTag = false;\n                if (xmlData[i] === \"/\") {\n                    //closing tag\n                    closingTag = true;\n                    i++;\n                }\n                //read tagname\n                let tagName = \"\";\n                for(; i < xmlData.length && xmlData[i] !== \">\" && xmlData[i] !== \" \" && xmlData[i] !== \"\t\" && xmlData[i] !== \"\\n\" && xmlData[i] !== \"\\r\"; i++){\n                    tagName += xmlData[i];\n                }\n                tagName = tagName.trim();\n                //console.log(tagName);\n                if (tagName[tagName.length - 1] === \"/\") {\n                    //self closing tag without attributes\n                    tagName = tagName.substring(0, tagName.length - 1);\n                    //continue;\n                    i--;\n                }\n                if (!validateTagName(tagName)) {\n                    let msg;\n                    if (tagName.trim().length === 0) {\n                        msg = \"Invalid space after '<'.\";\n                    } else {\n                        msg = \"Tag '\" + tagName + \"' is an invalid name.\";\n                    }\n                    return getErrorObject(\"InvalidTag\", msg, getLineNumberForPosition(xmlData, i));\n                }\n                const result = readAttributeStr(xmlData, i);\n                if (result === false) {\n                    return getErrorObject(\"InvalidAttr\", \"Attributes for '\" + tagName + \"' have open quote.\", getLineNumberForPosition(xmlData, i));\n                }\n                let attrStr = result.value;\n                i = result.index;\n                if (attrStr[attrStr.length - 1] === \"/\") {\n                    //self closing tag\n                    const attrStrStart = i - attrStr.length;\n                    attrStr = attrStr.substring(0, attrStr.length - 1);\n                    const isValid = validateAttributeString(attrStr, options);\n                    if (isValid === true) {\n                        tagFound = true;\n                    //continue; //text may presents after self closing tag\n                    } else {\n                        //the result from the nested function returns the position of the error within the attribute\n                        //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n                        //this gives us the absolute index in the entire xml, which we can use to find the line at last\n                        return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n                    }\n                } else if (closingTag) {\n                    if (!result.tagClosed) {\n                        return getErrorObject(\"InvalidTag\", \"Closing tag '\" + tagName + \"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n                    } else if (attrStr.trim().length > 0) {\n                        return getErrorObject(\"InvalidTag\", \"Closing tag '\" + tagName + \"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n                    } else {\n                        const otg = tags.pop();\n                        if (tagName !== otg.tagName) {\n                            let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n                            return getErrorObject(\"InvalidTag\", \"Expected closing tag '\" + otg.tagName + \"' (opened in line \" + openPos.line + \", col \" + openPos.col + \") instead of closing tag '\" + tagName + \"'.\", getLineNumberForPosition(xmlData, tagStartPos));\n                        }\n                        //when there are no more tags, we reached the root level.\n                        if (tags.length == 0) {\n                            reachedRoot = true;\n                        }\n                    }\n                } else {\n                    const isValid = validateAttributeString(attrStr, options);\n                    if (isValid !== true) {\n                        //the result from the nested function returns the position of the error within the attribute\n                        //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n                        //this gives us the absolute index in the entire xml, which we can use to find the line at last\n                        return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n                    }\n                    //if the root level has been reached before ...\n                    if (reachedRoot === true) {\n                        return getErrorObject(\"InvalidXml\", \"Multiple possible root nodes found.\", getLineNumberForPosition(xmlData, i));\n                    } else if (options.unpairedTags.indexOf(tagName) !== -1) {\n                    //don't push into stack\n                    } else {\n                        tags.push({\n                            tagName,\n                            tagStartPos\n                        });\n                    }\n                    tagFound = true;\n                }\n                //skip tag text value\n                //It may include comments and CDATA value\n                for(i++; i < xmlData.length; i++){\n                    if (xmlData[i] === \"<\") {\n                        if (xmlData[i + 1] === \"!\") {\n                            //comment or CADATA\n                            i++;\n                            i = readCommentAndCDATA(xmlData, i);\n                            continue;\n                        } else if (xmlData[i + 1] === \"?\") {\n                            i = readPI(xmlData, ++i);\n                            if (i.err) return i;\n                        } else {\n                            break;\n                        }\n                    } else if (xmlData[i] === \"&\") {\n                        const afterAmp = validateAmpersand(xmlData, i);\n                        if (afterAmp == -1) return getErrorObject(\"InvalidChar\", \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n                        i = afterAmp;\n                    } else {\n                        if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n                            return getErrorObject(\"InvalidXml\", \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n                        }\n                    }\n                } //end of reading tag text value\n                if (xmlData[i] === \"<\") {\n                    i--;\n                }\n            }\n        } else {\n            if (isWhiteSpace(xmlData[i])) {\n                continue;\n            }\n            return getErrorObject(\"InvalidChar\", \"char '\" + xmlData[i] + \"' is not expected.\", getLineNumberForPosition(xmlData, i));\n        }\n    }\n    if (!tagFound) {\n        return getErrorObject(\"InvalidXml\", \"Start tag expected.\", 1);\n    } else if (tags.length == 1) {\n        return getErrorObject(\"InvalidTag\", \"Unclosed tag '\" + tags[0].tagName + \"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n    } else if (tags.length > 0) {\n        return getErrorObject(\"InvalidXml\", \"Invalid '\" + JSON.stringify(tags.map((t)=>t.tagName), null, 4).replace(/\\r?\\n/g, \"\") + \"' found.\", {\n            line: 1,\n            col: 1\n        });\n    }\n    return true;\n};\nfunction isWhiteSpace(char) {\n    return char === \" \" || char === \"\t\" || char === \"\\n\" || char === \"\\r\";\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */ function readPI(xmlData, i) {\n    const start = i;\n    for(; i < xmlData.length; i++){\n        if (xmlData[i] == \"?\" || xmlData[i] == \" \") {\n            //tagname\n            const tagname = xmlData.substr(start, i - start);\n            if (i > 5 && tagname === \"xml\") {\n                return getErrorObject(\"InvalidXml\", \"XML declaration allowed only at the start of the document.\", getLineNumberForPosition(xmlData, i));\n            } else if (xmlData[i] == \"?\" && xmlData[i + 1] == \">\") {\n                //check if valid attribut string\n                i++;\n                break;\n            } else {\n                continue;\n            }\n        }\n    }\n    return i;\n}\nfunction readCommentAndCDATA(xmlData, i) {\n    if (xmlData.length > i + 5 && xmlData[i + 1] === \"-\" && xmlData[i + 2] === \"-\") {\n        //comment\n        for(i += 3; i < xmlData.length; i++){\n            if (xmlData[i] === \"-\" && xmlData[i + 1] === \"-\" && xmlData[i + 2] === \">\") {\n                i += 2;\n                break;\n            }\n        }\n    } else if (xmlData.length > i + 8 && xmlData[i + 1] === \"D\" && xmlData[i + 2] === \"O\" && xmlData[i + 3] === \"C\" && xmlData[i + 4] === \"T\" && xmlData[i + 5] === \"Y\" && xmlData[i + 6] === \"P\" && xmlData[i + 7] === \"E\") {\n        let angleBracketsCount = 1;\n        for(i += 8; i < xmlData.length; i++){\n            if (xmlData[i] === \"<\") {\n                angleBracketsCount++;\n            } else if (xmlData[i] === \">\") {\n                angleBracketsCount--;\n                if (angleBracketsCount === 0) {\n                    break;\n                }\n            }\n        }\n    } else if (xmlData.length > i + 9 && xmlData[i + 1] === \"[\" && xmlData[i + 2] === \"C\" && xmlData[i + 3] === \"D\" && xmlData[i + 4] === \"A\" && xmlData[i + 5] === \"T\" && xmlData[i + 6] === \"A\" && xmlData[i + 7] === \"[\") {\n        for(i += 8; i < xmlData.length; i++){\n            if (xmlData[i] === \"]\" && xmlData[i + 1] === \"]\" && xmlData[i + 2] === \">\") {\n                i += 2;\n                break;\n            }\n        }\n    }\n    return i;\n}\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */ function readAttributeStr(xmlData, i) {\n    let attrStr = \"\";\n    let startChar = \"\";\n    let tagClosed = false;\n    for(; i < xmlData.length; i++){\n        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n            if (startChar === \"\") {\n                startChar = xmlData[i];\n            } else if (startChar !== xmlData[i]) {\n            //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n            } else {\n                startChar = \"\";\n            }\n        } else if (xmlData[i] === \">\") {\n            if (startChar === \"\") {\n                tagClosed = true;\n                break;\n            }\n        }\n        attrStr += xmlData[i];\n    }\n    if (startChar !== \"\") {\n        return false;\n    }\n    return {\n        value: attrStr,\n        index: i,\n        tagClosed: tagClosed\n    };\n}\n/**\n * Select all the attributes whether valid or invalid.\n */ const validAttrStrRegxp = new RegExp(\"(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*(['\\\"])(([\\\\s\\\\S])*?)\\\\5)?\", \"g\");\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\nfunction validateAttributeString(attrStr, options) {\n    //console.log(\"start:\"+attrStr+\":end\");\n    //if(attrStr.trim().length === 0) return true; //empty string\n    const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n    const attrNames = {};\n    for(let i = 0; i < matches.length; i++){\n        if (matches[i][1].length === 0) {\n            //nospace before attribute name: a=\"sd\"b=\"saf\"\n            return getErrorObject(\"InvalidAttr\", \"Attribute '\" + matches[i][2] + \"' has no space in starting.\", getPositionFromMatch(matches[i]));\n        } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n            return getErrorObject(\"InvalidAttr\", \"Attribute '\" + matches[i][2] + \"' is without value.\", getPositionFromMatch(matches[i]));\n        } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n            //independent attribute: ab\n            return getErrorObject(\"InvalidAttr\", \"boolean attribute '\" + matches[i][2] + \"' is not allowed.\", getPositionFromMatch(matches[i]));\n        }\n        /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */ const attrName = matches[i][2];\n        if (!validateAttrName(attrName)) {\n            return getErrorObject(\"InvalidAttr\", \"Attribute '\" + attrName + \"' is an invalid name.\", getPositionFromMatch(matches[i]));\n        }\n        if (!attrNames.hasOwnProperty(attrName)) {\n            //check for duplicate attribute.\n            attrNames[attrName] = 1;\n        } else {\n            return getErrorObject(\"InvalidAttr\", \"Attribute '\" + attrName + \"' is repeated.\", getPositionFromMatch(matches[i]));\n        }\n    }\n    return true;\n}\nfunction validateNumberAmpersand(xmlData, i) {\n    let re = /\\d/;\n    if (xmlData[i] === \"x\") {\n        i++;\n        re = /[\\da-fA-F]/;\n    }\n    for(; i < xmlData.length; i++){\n        if (xmlData[i] === \";\") return i;\n        if (!xmlData[i].match(re)) break;\n    }\n    return -1;\n}\nfunction validateAmpersand(xmlData, i) {\n    // https://www.w3.org/TR/xml/#dt-charref\n    i++;\n    if (xmlData[i] === \";\") return -1;\n    if (xmlData[i] === \"#\") {\n        i++;\n        return validateNumberAmpersand(xmlData, i);\n    }\n    let count = 0;\n    for(; i < xmlData.length; i++, count++){\n        if (xmlData[i].match(/\\w/) && count < 20) continue;\n        if (xmlData[i] === \";\") break;\n        return -1;\n    }\n    return i;\n}\nfunction getErrorObject(code, message, lineNumber) {\n    return {\n        err: {\n            code: code,\n            msg: message,\n            line: lineNumber.line || lineNumber,\n            col: lineNumber.col\n        }\n    };\n}\nfunction validateAttrName(attrName) {\n    return util.isName(attrName);\n}\n// const startsWithXML = /^xml/i;\nfunction validateTagName(tagname) {\n    return util.isName(tagname) /* && !tagname.match(startsWithXML) */ ;\n}\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n    const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n    return {\n        line: lines.length,\n        // column number is last line's length + 1, because column numbering starts at 1:\n        col: lines[lines.length - 1].length + 1\n    };\n}\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n    return match.startIndex + match[1].length;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/validator.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js":
/*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js ***!
  \**************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = __webpack_require__(/*! ./orderedJs2Xml */ \"(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js\");\nconst defaultOptions = {\n    attributeNamePrefix: \"@_\",\n    attributesGroupName: false,\n    textNodeName: \"#text\",\n    ignoreAttributes: true,\n    cdataPropName: false,\n    format: false,\n    indentBy: \"  \",\n    suppressEmptyNode: false,\n    suppressUnpairedNode: true,\n    suppressBooleanAttributes: true,\n    tagValueProcessor: function(key, a) {\n        return a;\n    },\n    attributeValueProcessor: function(attrName, a) {\n        return a;\n    },\n    preserveOrder: false,\n    commentPropName: false,\n    unpairedTags: [],\n    entities: [\n        {\n            regex: new RegExp(\"&\", \"g\"),\n            val: \"&amp;\"\n        },\n        {\n            regex: new RegExp(\">\", \"g\"),\n            val: \"&gt;\"\n        },\n        {\n            regex: new RegExp(\"<\", \"g\"),\n            val: \"&lt;\"\n        },\n        {\n            regex: new RegExp(\"'\", \"g\"),\n            val: \"&apos;\"\n        },\n        {\n            regex: new RegExp('\"', \"g\"),\n            val: \"&quot;\"\n        }\n    ],\n    processEntities: true,\n    stopNodes: [],\n    // transformTagName: false,\n    // transformAttributeName: false,\n    oneListGroup: false\n};\nfunction Builder(options) {\n    this.options = Object.assign({}, defaultOptions, options);\n    if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n        this.isAttribute = function() {\n            return false;\n        };\n    } else {\n        this.attrPrefixLen = this.options.attributeNamePrefix.length;\n        this.isAttribute = isAttribute;\n    }\n    this.processTextOrObjNode = processTextOrObjNode;\n    if (this.options.format) {\n        this.indentate = indentate;\n        this.tagEndChar = \">\\n\";\n        this.newLine = \"\\n\";\n    } else {\n        this.indentate = function() {\n            return \"\";\n        };\n        this.tagEndChar = \">\";\n        this.newLine = \"\";\n    }\n}\nBuilder.prototype.build = function(jObj) {\n    if (this.options.preserveOrder) {\n        return buildFromOrderedJs(jObj, this.options);\n    } else {\n        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {\n            jObj = {\n                [this.options.arrayNodeName]: jObj\n            };\n        }\n        return this.j2x(jObj, 0).val;\n    }\n};\nBuilder.prototype.j2x = function(jObj, level) {\n    let attrStr = \"\";\n    let val = \"\";\n    for(let key in jObj){\n        if (typeof jObj[key] === \"undefined\") {\n        // supress undefined node\n        } else if (jObj[key] === null) {\n            if (key[0] === \"?\") val += this.indentate(level) + \"<\" + key + \"?\" + this.tagEndChar;\n            else val += this.indentate(level) + \"<\" + key + \"/\" + this.tagEndChar;\n        // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (jObj[key] instanceof Date) {\n            val += this.buildTextValNode(jObj[key], key, \"\", level);\n        } else if (typeof jObj[key] !== \"object\") {\n            //premitive type\n            const attr = this.isAttribute(key);\n            if (attr) {\n                attrStr += this.buildAttrPairStr(attr, \"\" + jObj[key]);\n            } else {\n                //tag value\n                if (key === this.options.textNodeName) {\n                    let newval = this.options.tagValueProcessor(key, \"\" + jObj[key]);\n                    val += this.replaceEntitiesValue(newval);\n                } else {\n                    val += this.buildTextValNode(jObj[key], key, \"\", level);\n                }\n            }\n        } else if (Array.isArray(jObj[key])) {\n            //repeated nodes\n            const arrLen = jObj[key].length;\n            let listTagVal = \"\";\n            for(let j = 0; j < arrLen; j++){\n                const item = jObj[key][j];\n                if (typeof item === \"undefined\") {\n                // supress undefined node\n                } else if (item === null) {\n                    if (key[0] === \"?\") val += this.indentate(level) + \"<\" + key + \"?\" + this.tagEndChar;\n                    else val += this.indentate(level) + \"<\" + key + \"/\" + this.tagEndChar;\n                // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n                } else if (typeof item === \"object\") {\n                    if (this.options.oneListGroup) {\n                        listTagVal += this.j2x(item, level + 1).val;\n                    } else {\n                        listTagVal += this.processTextOrObjNode(item, key, level);\n                    }\n                } else {\n                    listTagVal += this.buildTextValNode(item, key, \"\", level);\n                }\n            }\n            if (this.options.oneListGroup) {\n                listTagVal = this.buildObjectNode(listTagVal, key, \"\", level);\n            }\n            val += listTagVal;\n        } else {\n            //nested node\n            if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n                const Ks = Object.keys(jObj[key]);\n                const L = Ks.length;\n                for(let j = 0; j < L; j++){\n                    attrStr += this.buildAttrPairStr(Ks[j], \"\" + jObj[key][Ks[j]]);\n                }\n            } else {\n                val += this.processTextOrObjNode(jObj[key], key, level);\n            }\n        }\n    }\n    return {\n        attrStr: attrStr,\n        val: val\n    };\n};\nBuilder.prototype.buildAttrPairStr = function(attrName, val) {\n    val = this.options.attributeValueProcessor(attrName, \"\" + val);\n    val = this.replaceEntitiesValue(val);\n    if (this.options.suppressBooleanAttributes && val === \"true\") {\n        return \" \" + attrName;\n    } else return \" \" + attrName + '=\"' + val + '\"';\n};\nfunction processTextOrObjNode(object, key, level) {\n    const result = this.j2x(object, level + 1);\n    if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n        return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n    } else {\n        return this.buildObjectNode(result.val, key, result.attrStr, level);\n    }\n}\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n    if (val === \"\") {\n        if (key[0] === \"?\") return this.indentate(level) + \"<\" + key + attrStr + \"?\" + this.tagEndChar;\n        else {\n            return this.indentate(level) + \"<\" + key + attrStr + this.closeTag(key) + this.tagEndChar;\n        }\n    } else {\n        let tagEndExp = \"</\" + key + this.tagEndChar;\n        let piClosingChar = \"\";\n        if (key[0] === \"?\") {\n            piClosingChar = \"?\";\n            tagEndExp = \"\";\n        }\n        if (attrStr && val.indexOf(\"<\") === -1) {\n            return this.indentate(level) + \"<\" + key + attrStr + piClosingChar + \">\" + val + tagEndExp;\n        } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n            return this.indentate(level) + `<!--${val}-->` + this.newLine;\n        } else {\n            return this.indentate(level) + \"<\" + key + attrStr + piClosingChar + this.tagEndChar + val + this.indentate(level) + tagEndExp;\n        }\n    }\n};\nBuilder.prototype.closeTag = function(key) {\n    let closeTag = \"\";\n    if (this.options.unpairedTags.indexOf(key) !== -1) {\n        if (!this.options.suppressUnpairedNode) closeTag = \"/\";\n    } else if (this.options.suppressEmptyNode) {\n        closeTag = \"/\";\n    } else {\n        closeTag = `></${key}`;\n    }\n    return closeTag;\n};\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n    if (val !== \"\") {\n        return this.buildObjectNode(val, key, attrStr, level);\n    } else {\n        if (key[0] === \"?\") return this.indentate(level) + \"<\" + key + attrStr + \"?\" + this.tagEndChar;\n        else {\n            return this.indentate(level) + \"<\" + key + attrStr + \"/\" + this.tagEndChar;\n        // return this.buildTagStr(level,key, attrStr);\n        }\n    }\n}\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n    if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n        return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n        return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    } else if (key[0] === \"?\") {\n        return this.indentate(level) + \"<\" + key + attrStr + \"?\" + this.tagEndChar;\n    } else {\n        let textValue = this.options.tagValueProcessor(key, val);\n        textValue = this.replaceEntitiesValue(textValue);\n        if (textValue === \"\") {\n            return this.indentate(level) + \"<\" + key + attrStr + this.closeTag(key) + this.tagEndChar;\n        } else {\n            return this.indentate(level) + \"<\" + key + attrStr + \">\" + textValue + \"</\" + key + this.tagEndChar;\n        }\n    }\n};\nBuilder.prototype.replaceEntitiesValue = function(textValue) {\n    if (textValue && textValue.length > 0 && this.options.processEntities) {\n        for(let i = 0; i < this.options.entities.length; i++){\n            const entity = this.options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n};\nfunction indentate(level) {\n    return this.options.indentBy.repeat(level);\n}\nfunction isAttribute(name /*, options*/ ) {\n    if (name.startsWith(this.options.attributeNamePrefix)) {\n        return name.substr(this.attrPrefixLen);\n    } else {\n        return false;\n    }\n}\nmodule.exports = Builder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js ***!
  \*******************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nconst EOL = \"\\n\";\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */ function toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n    for(let i = 0; i < arr.length; i++){\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName;\n        else newJPath = `${jPath}.${tagName}`;\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n    return xmlStr;\n}\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for(let i = 0; i < keys.length; i++){\n        const key = keys[i];\n        if (key !== \":@\") return key;\n    }\n}\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for(let attr in attrMap){\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for(let index in options.stopNodes){\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for(let i = 0; i < options.entities.length; i++){\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2Zhc3QteG1sLXBhcnNlckA0LjIuNS9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxidWlsZGVyL29yZGVyZWRKczJYbWwuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLE1BQU07QUFFWjs7Ozs7Q0FLQyxHQUNELFNBQVNDLE1BQU1DLE1BQU0sRUFBRUMsT0FBTztJQUMxQixJQUFJQyxjQUFjO0lBQ2xCLElBQUlELFFBQVFFLE1BQU0sSUFBSUYsUUFBUUcsUUFBUSxDQUFDQyxNQUFNLEdBQUcsR0FBRztRQUMvQ0gsY0FBY0o7SUFDbEI7SUFDQSxPQUFPUSxTQUFTTixRQUFRQyxTQUFTLElBQUlDO0FBQ3pDO0FBRUEsU0FBU0ksU0FBU0MsR0FBRyxFQUFFTixPQUFPLEVBQUVPLEtBQUssRUFBRU4sV0FBVztJQUM5QyxJQUFJTyxTQUFTO0lBQ2IsSUFBSUMsdUJBQXVCO0lBRTNCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSixJQUFJRixNQUFNLEVBQUVNLElBQUs7UUFDakMsTUFBTUMsU0FBU0wsR0FBRyxDQUFDSSxFQUFFO1FBQ3JCLE1BQU1FLFVBQVVDLFNBQVNGO1FBQ3pCLElBQUlHLFdBQVc7UUFDZixJQUFJUCxNQUFNSCxNQUFNLEtBQUssR0FBR1UsV0FBV0Y7YUFDOUJFLFdBQVcsQ0FBQyxFQUFFUCxNQUFNLENBQUMsRUFBRUssUUFBUSxDQUFDO1FBRXJDLElBQUlBLFlBQVlaLFFBQVFlLFlBQVksRUFBRTtZQUNsQyxJQUFJQyxVQUFVTCxNQUFNLENBQUNDLFFBQVE7WUFDN0IsSUFBSSxDQUFDSyxXQUFXSCxVQUFVZCxVQUFVO2dCQUNoQ2dCLFVBQVVoQixRQUFRa0IsaUJBQWlCLENBQUNOLFNBQVNJO2dCQUM3Q0EsVUFBVUcscUJBQXFCSCxTQUFTaEI7WUFDNUM7WUFDQSxJQUFJUyxzQkFBc0I7Z0JBQ3RCRCxVQUFVUDtZQUNkO1lBQ0FPLFVBQVVRO1lBQ1ZQLHVCQUF1QjtZ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QUFJVixRQUFRcUQsUUFBUSxDQUFDakQsTUFBTSxFQUFFTSxJQUFLO1lBQzlDLE1BQU00QyxTQUFTdEQsUUFBUXFELFFBQVEsQ0FBQzNDLEVBQUU7WUFDbEN5QyxZQUFZQSxVQUFVSSxPQUFPLENBQUNELE9BQU9FLEtBQUssRUFBRUYsT0FBT0csR0FBRztRQUMxRDtJQUNKO0lBQ0EsT0FBT047QUFDWDtBQUNBTyxPQUFPQyxPQUFPLEdBQUc3RCIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZmFzdC14bWwtcGFyc2VyQDQuMi41L25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbGJ1aWxkZXIvb3JkZXJlZEpzMlhtbC5qcz9mN2E4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEVPTCA9IFwiXFxuXCI7XG5cbi8qKlxuICogXG4gKiBAcGFyYW0ge2FycmF5fSBqQXJyYXkgXG4gKiBAcGFyYW0ge2FueX0gb3B0aW9ucyBcbiAqIEByZXR1cm5zIFxuICovXG5mdW5jdGlvbiB0b1htbChqQXJyYXksIG9wdGlvbnMpIHtcbiAgICBsZXQgaW5kZW50YXRpb24gPSBcIlwiO1xuICAgIGlmIChvcHRpb25zLmZvcm1hdCAmJiBvcHRpb25zLmluZGVudEJ5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgaW5kZW50YXRpb24gPSBFT0w7XG4gICAgfVxuICAgIHJldHVybiBhcnJUb1N0cihqQXJyYXksIG9wdGlvbnMsIFwiXCIsIGluZGVudGF0aW9uKTtcbn1cblxuZnVuY3Rpb24gYXJyVG9TdHIoYXJyLCBvcHRpb25zLCBqUGF0aCwgaW5kZW50YXRpb24pIHtcbiAgICBsZXQgeG1sU3RyID0gXCJcIjtcbiAgICBsZXQgaXNQcmV2aW91c0VsZW1lbnRUYWcgPSBmYWxzZTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRhZ09iaiA9IGFycltpXTtcbiAgICAgICAgY29uc3QgdGFnTmFtZSA9IHByb3BOYW1lKHRhZ09iaik7XG4gICAgICAgIGxldCBuZXdKUGF0aCA9IFwiXCI7XG4gICAgICAgIGlmIChqUGF0aC5sZW5ndGggPT09IDApIG5ld0pQYXRoID0gdGFnTmFtZVxuICAgICAgICBlbHNlIG5ld0pQYXRoID0gYCR7alBhdGh9LiR7dGFnTmFtZX1gO1xuXG4gICAgICAgIGlmICh0YWdOYW1lID09PSBvcHRpb25zLnRleHROb2RlTmFtZSkge1xuICAgICAgICAgICAgbGV0IHRhZ1RleHQgPSB0YWdPYmpbdGFnTmFtZV07XG4gICAgICAgICAgICBpZiAoIWlzU3RvcE5vZGUobmV3SlBhdGgsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgdGFnVGV4dCA9IG9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3IodGFnTmFtZSwgdGFnVGV4dCk7XG4gICAgICAgICAgICAgICAgdGFnVGV4dCA9IHJlcGxhY2VFbnRpdGllc1ZhbHVlKHRhZ1RleHQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUHJldmlvdXNFbGVtZW50VGFnKSB7XG4gICAgICAgICAgICAgICAgeG1sU3RyICs9IGluZGVudGF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeG1sU3RyICs9IHRhZ1RleHQ7XG4gICAgICAgICAgICBpc1ByZXZpb3VzRWxlbWVudFRhZyA9IGZhbHNlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAodGFnTmFtZSA9PT0gb3B0aW9ucy5jZGF0YVByb3BOYW1lKSB7XG4gICAgICAgICAgICBpZiAoaXNQcmV2aW91c0VsZW1lbnRUYWcpIHtcbiAgICAgICAgICAgICAgICB4bWxTdHIgKz0gaW5kZW50YXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4bWxTdHIgKz0gYDwhW0NEQVRBWyR7dGFnT2JqW3RhZ05hbWVdWzBdW29wdGlvbnMudGV4dE5vZGVOYW1lXX1dXT5gO1xuICAgICAgICAgICAgaXNQcmV2aW91c0VsZW1lbnRUYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRhZ05hbWUgPT09IG9wdGlvbnMuY29tbWVudFByb3BOYW1lKSB7XG4gICAgICAgICAgICB4bWxTdHIgKz0gaW5kZW50YXRpb24gKyBgPCEtLSR7dGFnT2JqW3RhZ05hbWVdWzBdW29wdGlvbnMudGV4dE5vZGVOYW1lXX0tLT5gO1xuICAgICAgICAgICAgaXNQcmV2aW91c0VsZW1lbnRUYWcgPSB0cnVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAodGFnTmFtZVswXSA9PT0gXCI/XCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dFN0ciA9IGF0dHJfdG9fc3RyKHRhZ09ialtcIjpAXCJdLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBJbmQgPSB0YWdOYW1lID09PSBcIj94bWxcIiA/IFwiXCIgOiBpbmRlbnRhdGlvbjtcbiAgICAgICAgICAgIGxldCBwaVRleHROb2RlTmFtZSA9IHRhZ09ialt0YWdOYW1lXVswXVtvcHRpb25zLnRleHROb2RlTmFtZV07XG4gICAgICAgICAgICBwaVRleHROb2RlTmFtZSA9IHBpVGV4dE5vZGVOYW1lLmxlbmd0aCAhPT0gMCA/IFwiIFwiICsgcGlUZXh0Tm9kZU5hbWUgOiBcIlwiOyAvL3JlbW92ZSBleHRyYSBzcGFjaW5nXG4gICAgICAgICAgICB4bWxTdHIgKz0gdGVtcEluZCArIGA8JHt0YWdOYW1lfSR7cGlUZXh0Tm9kZU5hbWV9JHthdHRTdHJ9Pz5gO1xuICAgICAgICAgICAgaXNQcmV2aW91c0VsZW1lbnRUYWcgPSB0cnVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5ld0lkZW50YXRpb24gPSBpbmRlbnRhdGlvbjtcbiAgICAgICAgaWYgKG5ld0lkZW50YXRpb24gIT09IFwiXCIpIHtcbiAgICAgICAgICAgIG5ld0lkZW50YXRpb24gKz0gb3B0aW9ucy5pbmRlbnRCeTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdHRTdHIgPSBhdHRyX3RvX3N0cih0YWdPYmpbXCI6QFwiXSwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHRhZ1N0YXJ0ID0gaW5kZW50YXRpb24gKyBgPCR7dGFnTmFtZX0ke2F0dFN0cn1gO1xuICAgICAgICBjb25zdCB0YWdWYWx1ZSA9IGFyclRvU3RyKHRhZ09ialt0YWdOYW1lXSwgb3B0aW9ucywgbmV3SlBhdGgsIG5ld0lkZW50YXRpb24pO1xuICAgICAgICBpZiAob3B0aW9ucy51bnBhaXJlZFRhZ3MuaW5kZXhPZih0YWdOYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnN1cHByZXNzVW5wYWlyZWROb2RlKSB4bWxTdHIgKz0gdGFnU3RhcnQgKyBcIj5cIjtcbiAgICAgICAgICAgIGVsc2UgeG1sU3RyICs9IHRhZ1N0YXJ0ICsgXCIvPlwiO1xuICAgICAgICB9IGVsc2UgaWYgKCghdGFnVmFsdWUgfHwgdGFnVmFsdWUubGVuZ3RoID09PSAwKSAmJiBvcHRpb25zLnN1cHByZXNzRW1wdHlOb2RlKSB7XG4gICAgICAgICAgICB4bWxTdHIgKz0gdGFnU3RhcnQgKyBcIi8+XCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFnVmFsdWUgJiYgdGFnVmFsdWUuZW5kc1dpdGgoXCI+XCIpKSB7XG4gICAgICAgICAgICB4bWxTdHIgKz0gdGFnU3RhcnQgKyBgPiR7dGFnVmFsdWV9JHtpbmRlbnRhdGlvbn08LyR7dGFnTmFtZX0+YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHhtbFN0ciArPSB0YWdTdGFydCArIFwiPlwiO1xuICAgICAgICAgICAgaWYgKHRhZ1ZhbHVlICYmIGluZGVudGF0aW9uICE9PSBcIlwiICYmICh0YWdWYWx1ZS5pbmNsdWRlcyhcIi8+XCIpIHx8IHRhZ1ZhbHVlLmluY2x1ZGVzKFwiPC9cIikpKSB7XG4gICAgICAgICAgICAgICAgeG1sU3RyICs9IGluZGVudGF0aW9uICsgb3B0aW9ucy5pbmRlbnRCeSArIHRhZ1ZhbHVlICsgaW5kZW50YXRpb247XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHhtbFN0ciArPSB0YWdWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHhtbFN0ciArPSBgPC8ke3RhZ05hbWV9PmA7XG4gICAgICAgIH1cbiAgICAgICAgaXNQcmV2aW91c0VsZW1lbnRUYWcgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB4bWxTdHI7XG59XG5cbmZ1bmN0aW9uIHByb3BOYW1lKG9iaikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBpZiAoa2V5ICE9PSBcIjpAXCIpIHJldHVybiBrZXk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhdHRyX3RvX3N0cihhdHRyTWFwLCBvcHRpb25zKSB7XG4gICAgbGV0IGF0dHJTdHIgPSBcIlwiO1xuICAgIGlmIChhdHRyTWFwICYmICFvcHRpb25zLmlnbm9yZUF0dHJpYnV0ZXMpIHtcbiAgICAgICAgZm9yIChsZXQgYXR0ciBpbiBhdHRyTWFwKSB7XG4gICAgICAgICAgICBsZXQgYXR0clZhbCA9IG9wdGlvbnMuYXR0cmlidXRlVmFsdWVQcm9jZXNzb3IoYXR0ciwgYXR0ck1hcFthdHRyXSk7XG4gICAgICAgICAgICBhdHRyVmFsID0gcmVwbGFjZUVudGl0aWVzVmFsdWUoYXR0clZhbCwgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoYXR0clZhbCA9PT0gdHJ1ZSAmJiBvcHRpb25zLnN1cHByZXNzQm9vbGVhbkF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBhdHRyU3RyICs9IGAgJHthdHRyLnN1YnN0cihvcHRpb25zLmF0dHJpYnV0ZU5hbWVQcmVmaXgubGVuZ3RoKX1gO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhdHRyU3RyICs9IGAgJHthdHRyLnN1YnN0cihvcHRpb25zLmF0dHJpYnV0ZU5hbWVQcmVmaXgubGVuZ3RoKX09XCIke2F0dHJWYWx9XCJgO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhdHRyU3RyO1xufVxuXG5mdW5jdGlvbiBpc1N0b3BOb2RlKGpQYXRoLCBvcHRpb25zKSB7XG4gICAgalBhdGggPSBqUGF0aC5zdWJzdHIoMCwgalBhdGgubGVuZ3RoIC0gb3B0aW9ucy50ZXh0Tm9kZU5hbWUubGVuZ3RoIC0gMSk7XG4gICAgbGV0IHRhZ05hbWUgPSBqUGF0aC5zdWJzdHIoalBhdGgubGFzdEluZGV4T2YoXCIuXCIpICsgMSk7XG4gICAgZm9yIChsZXQgaW5kZXggaW4gb3B0aW9ucy5zdG9wTm9kZXMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuc3RvcE5vZGVzW2luZGV4XSA9PT0galBhdGggfHwgb3B0aW9ucy5zdG9wTm9kZXNbaW5kZXhdID09PSBcIiouXCIgKyB0YWdOYW1lKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlRW50aXRpZXNWYWx1ZSh0ZXh0VmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAodGV4dFZhbHVlICYmIHRleHRWYWx1ZS5sZW5ndGggPiAwICYmIG9wdGlvbnMucHJvY2Vzc0VudGl0aWVzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0aW9ucy5lbnRpdGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZW50aXR5ID0gb3B0aW9ucy5lbnRpdGllc1tpXTtcbiAgICAgICAgICAgIHRleHRWYWx1ZSA9IHRleHRWYWx1ZS5yZXBsYWNlKGVudGl0eS5yZWdleCwgZW50aXR5LnZhbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRleHRWYWx1ZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gdG9YbWw7XG4iXSwibmFtZXMiOlsiRU9MIiwidG9YbWwiLCJqQXJyYXkiLCJvcHRpb25zIiwiaW5kZW50YXRpb24iLCJmb3JtYXQiLCJpbmRlbnRCeSIsImxlbmd0aCIsImFyclRvU3RyIiwiYXJyIiwialBhdGgiLCJ4bWxTdHIiLCJpc1ByZXZpb3VzRWxlbWVudFRhZyIsImkiLCJ0YWdPYmoiLCJ0YWdOYW1lIiwicHJvcE5hbWUiLCJuZXdKUGF0aCIsInRleHROb2RlTmFtZSIsInRhZ1RleHQiLCJpc1N0b3BOb2RlIiwidGFnVmFsdWVQcm9jZXNzb3IiLCJyZXBsYWNlRW50aXRpZXNWYWx1ZSIsImNkYXRhUHJvcE5hbWUiLCJjb21tZW50UHJvcE5hbWUiLCJhdHRTdHIiLCJhdHRyX3RvX3N0ciIsInRlbXBJbmQiLCJwaVRleHROb2RlTmFtZSIsIm5ld0lkZW50YXRpb24iLCJ0YWdTdGFydCIsInRhZ1ZhbHVlIiwidW5wYWlyZWRUYWdzIiwiaW5kZXhPZiIsInN1cHByZXNzVW5wYWlyZWROb2RlIiwic3VwcHJlc3NFbXB0eU5vZGUiLCJlbmRzV2l0aCIsImluY2x1ZGVzIiwib2JqIiwia2V5cyIsIk9iamVjdCIsImtleSIsImF0dHJNYXAiLCJhdHRyU3RyIiwiaWdub3JlQXR0cmlidXRlcyIsImF0dHIiLCJhdHRyVmFsIiwiYXR0cmlidXRlVmFsdWVQcm9jZXNzb3IiLCJzdXBwcmVzc0Jvb2xlYW5BdHRyaWJ1dGVzIiwic3Vic3RyIiwiYXR0cmlidXRlTmFtZVByZWZpeCIsImxhc3RJbmRleE9mIiwiaW5kZXgiLCJzdG9wTm9kZXMiLCJ0ZXh0VmFsdWUiLCJwcm9jZXNzRW50aXRpZXMiLCJlbnRpdGllcyIsImVudGl0eSIsInJlcGxhY2UiLCJyZWdleCIsInZhbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js":
/*!******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js ***!
  \******************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst util = __webpack_require__(/*! ../util */ \"(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/util.js\");\n//TODO: handle comments\nfunction readDocType(xmlData, i) {\n    const entities = {};\n    if (xmlData[i + 3] === \"O\" && xmlData[i + 4] === \"C\" && xmlData[i + 5] === \"T\" && xmlData[i + 6] === \"Y\" && xmlData[i + 7] === \"P\" && xmlData[i + 8] === \"E\") {\n        i = i + 9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(; i < xmlData.length; i++){\n            if (xmlData[i] === \"<\" && !comment) {\n                if (hasBody && isEntity(xmlData, i)) {\n                    i += 7;\n                    [entityName, val, i] = readEntityExp(xmlData, i + 1);\n                    if (val.indexOf(\"&\") === -1) entities[validateEntityName(entityName)] = {\n                        regx: RegExp(`&${entityName};`, \"g\"),\n                        val: val\n                    };\n                } else if (hasBody && isElement(xmlData, i)) i += 8; //Not supported\n                else if (hasBody && isAttlist(xmlData, i)) i += 8; //Not supported\n                else if (hasBody && isNotation(xmlData, i)) i += 9; //Not supported\n                else if (isComment) comment = true;\n                else throw new Error(\"Invalid DOCTYPE\");\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === \">\") {\n                if (comment) {\n                    if (xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\") {\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                } else {\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                    break;\n                }\n            } else if (xmlData[i] === \"[\") {\n                hasBody = true;\n            } else {\n                exp += xmlData[i];\n            }\n        }\n        if (angleBracketsCount !== 0) {\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    } else {\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {\n        entities,\n        i\n    };\n}\nfunction readEntityExp(xmlData, i) {\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    //read EntityName\n    let entityName1 = \"\";\n    for(; i < xmlData.length && xmlData[i] !== \"'\" && xmlData[i] !== '\"'; i++){\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName1 += xmlData[i];\n    }\n    entityName1 = entityName1.trim();\n    if (entityName1.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val1 = \"\";\n    for(; i < xmlData.length && xmlData[i] !== startChar; i++){\n        val1 += xmlData[i];\n    }\n    return [\n        entityName1,\n        val1,\n        i\n    ];\n}\nfunction isComment(xmlData, i) {\n    if (xmlData[i + 1] === \"!\" && xmlData[i + 2] === \"-\" && xmlData[i + 3] === \"-\") return true;\n    return false;\n}\nfunction isEntity(xmlData, i) {\n    if (xmlData[i + 1] === \"!\" && xmlData[i + 2] === \"E\" && xmlData[i + 3] === \"N\" && xmlData[i + 4] === \"T\" && xmlData[i + 5] === \"I\" && xmlData[i + 6] === \"T\" && xmlData[i + 7] === \"Y\") return true;\n    return false;\n}\nfunction isElement(xmlData, i) {\n    if (xmlData[i + 1] === \"!\" && xmlData[i + 2] === \"E\" && xmlData[i + 3] === \"L\" && xmlData[i + 4] === \"E\" && xmlData[i + 5] === \"M\" && xmlData[i + 6] === \"E\" && xmlData[i + 7] === \"N\" && xmlData[i + 8] === \"T\") return true;\n    return false;\n}\nfunction isAttlist(xmlData, i) {\n    if (xmlData[i + 1] === \"!\" && xmlData[i + 2] === \"A\" && xmlData[i + 3] === \"T\" && xmlData[i + 4] === \"T\" && xmlData[i + 5] === \"L\" && xmlData[i + 6] === \"I\" && xmlData[i + 7] === \"S\" && xmlData[i + 8] === \"T\") return true;\n    return false;\n}\nfunction isNotation(xmlData, i) {\n    if (xmlData[i + 1] === \"!\" && xmlData[i + 2] === \"N\" && xmlData[i + 3] === \"O\" && xmlData[i + 4] === \"T\" && xmlData[i + 5] === \"A\" && xmlData[i + 6] === \"T\" && xmlData[i + 7] === \"I\" && xmlData[i + 8] === \"O\" && xmlData[i + 9] === \"N\") return true;\n    return false;\n}\nfunction validateEntityName(name) {\n    if (util.isName(name)) return name;\n    else throw new Error(`Invalid entity name ${name}`);\n}\nmodule.exports = readDocType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js":
/*!*******************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("const defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: \"@_\",\n    attributesGroupName: false,\n    textNodeName: \"#text\",\n    ignoreAttributes: true,\n    removeNSPrefix: false,\n    allowBooleanAttributes: false,\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true,\n    cdataPropName: false,\n    numberParseOptions: {\n        hex: true,\n        leadingZeros: true,\n        eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n        return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n        return val;\n    },\n    stopNodes: [],\n    alwaysCreateTextNode: false,\n    isArray: ()=>false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs) {\n        return tagName;\n    }\n};\nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2Zhc3QteG1sLXBhcnNlckA0LjIuNS9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvT3B0aW9uc0J1aWxkZXIuanMiLCJtYXBwaW5ncyI6IkFBQ0EsTUFBTUEsaUJBQWlCO0lBQ25CQyxlQUFlO0lBQ2ZDLHFCQUFxQjtJQUNyQkMscUJBQXFCO0lBQ3JCQyxjQUFjO0lBQ2RDLGtCQUFrQjtJQUNsQkMsZ0JBQWdCO0lBQ2hCQyx3QkFBd0I7SUFDeEIsNEJBQTRCO0lBQzVCQyxlQUFlO0lBQ2ZDLHFCQUFxQjtJQUNyQkMsWUFBWTtJQUNaQyxlQUFlO0lBQ2ZDLG9CQUFvQjtRQUNsQkMsS0FBSztRQUNMQyxjQUFjO1FBQ2RDLFdBQVc7SUFDYjtJQUNBQyxtQkFBbUIsU0FBU0MsT0FBTyxFQUFFQyxHQUFHO1FBQ3RDLE9BQU9BO0lBQ1Q7SUFDQUMseUJBQXlCLFNBQVNDLFFBQVEsRUFBRUYsR0FBRztRQUM3QyxPQUFPQTtJQUNUO0lBQ0FHLFdBQVcsRUFBRTtJQUNiQyxzQkFBc0I7SUFDdEJDLFNBQVMsSUFBTTtJQUNmQyxpQkFBaUI7SUFDakJDLGNBQWMsRUFBRTtJQUNoQkMsaUJBQWlCO0lBQ2pCQyxjQUFjO0lBQ2RDLG1CQUFtQjtJQUNuQkMsY0FBYztJQUNkQyxrQkFBa0I7SUFDbEJDLHdCQUF3QjtJQUN4QkMsV0FBVyxTQUFTZixPQUFPLEVBQUVnQixLQUFLLEVBQUVDLEtBQUs7UUFDdkMsT0FBT2pCO0lBQ1Q7QUFFSjtBQUVBLE1BQU1rQixlQUFlLFNBQVNDLE9BQU87SUFDakMsT0FBT0MsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBR3RDLGdCQUFnQm9DO0FBQzdDO0FBRUFHLG9CQUFvQixHQUFHSjtBQUN2Qkksc0JBQXNCLEdBQUd2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZmFzdC14bWwtcGFyc2VyQDQuMi41L25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9PcHRpb25zQnVpbGRlci5qcz9hYzY3Il0sInNvdXJjZXNDb250ZW50IjpbIlxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgcHJlc2VydmVPcmRlcjogZmFsc2UsXG4gICAgYXR0cmlidXRlTmFtZVByZWZpeDogJ0BfJyxcbiAgICBhdHRyaWJ1dGVzR3JvdXBOYW1lOiBmYWxzZSxcbiAgICB0ZXh0Tm9kZU5hbWU6ICcjdGV4dCcsXG4gICAgaWdub3JlQXR0cmlidXRlczogdHJ1ZSxcbiAgICByZW1vdmVOU1ByZWZpeDogZmFsc2UsIC8vIHJlbW92ZSBOUyBmcm9tIHRhZyBuYW1lIG9yIGF0dHJpYnV0ZSBuYW1lIGlmIHRydWVcbiAgICBhbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzOiBmYWxzZSwgLy9hIHRhZyBjYW4gaGF2ZSBhdHRyaWJ1dGVzIHdpdGhvdXQgYW55IHZhbHVlXG4gICAgLy9pZ25vcmVSb290RWxlbWVudCA6IGZhbHNlLFxuICAgIHBhcnNlVGFnVmFsdWU6IHRydWUsXG4gICAgcGFyc2VBdHRyaWJ1dGVWYWx1ZTogZmFsc2UsXG4gICAgdHJpbVZhbHVlczogdHJ1ZSwgLy9UcmltIHN0cmluZyB2YWx1ZXMgb2YgdGFnIGFuZCBhdHRyaWJ1dGVzXG4gICAgY2RhdGFQcm9wTmFtZTogZmFsc2UsXG4gICAgbnVtYmVyUGFyc2VPcHRpb25zOiB7XG4gICAgICBoZXg6IHRydWUsXG4gICAgICBsZWFkaW5nWmVyb3M6IHRydWUsXG4gICAgICBlTm90YXRpb246IHRydWVcbiAgICB9LFxuICAgIHRhZ1ZhbHVlUHJvY2Vzc29yOiBmdW5jdGlvbih0YWdOYW1lLCB2YWwpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSxcbiAgICBhdHRyaWJ1dGVWYWx1ZVByb2Nlc3NvcjogZnVuY3Rpb24oYXR0ck5hbWUsIHZhbCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9LFxuICAgIHN0b3BOb2RlczogW10sIC8vbmVzdGVkIHRhZ3Mgd2lsbCBub3QgYmUgcGFyc2VkIGV2ZW4gZm9yIGVycm9yc1xuICAgIGFsd2F5c0NyZWF0ZVRleHROb2RlOiBmYWxzZSxcbiAgICBpc0FycmF5OiAoKSA9PiBmYWxzZSxcbiAgICBjb21tZW50UHJvcE5hbWU6IGZhbHNlLFxuICAgIHVucGFpcmVkVGFnczogW10sXG4gICAgcHJvY2Vzc0VudGl0aWVzOiB0cnVlLFxuICAgIGh0bWxFbnRpdGllczogZmFsc2UsXG4gICAgaWdub3JlRGVjbGFyYXRpb246IGZhbHNlLFxuICAgIGlnbm9yZVBpVGFnczogZmFsc2UsXG4gICAgdHJhbnNmb3JtVGFnTmFtZTogZmFsc2UsXG4gICAgdHJhbnNmb3JtQXR0cmlidXRlTmFtZTogZmFsc2UsXG4gICAgdXBkYXRlVGFnOiBmdW5jdGlvbih0YWdOYW1lLCBqUGF0aCwgYXR0cnMpe1xuICAgICAgcmV0dXJuIHRhZ05hbWVcbiAgICB9LFxuICAgIC8vIHNraXBFbXB0eUxpc3RJdGVtOiBmYWxzZVxufTtcbiAgIFxuY29uc3QgYnVpbGRPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG59O1xuXG5leHBvcnRzLmJ1aWxkT3B0aW9ucyA9IGJ1aWxkT3B0aW9ucztcbmV4cG9ydHMuZGVmYXVsdE9wdGlvbnMgPSBkZWZhdWx0T3B0aW9uczsiXSwibmFtZXMiOlsiZGVmYXVsdE9wdGlvbnMiLCJwcmVzZXJ2ZU9yZGVyIiwiYXR0cmlidXRlTmFtZVByZWZpeCIsImF0dHJpYnV0ZXNHcm91cE5hbWUiLCJ0ZXh0Tm9kZU5hbWUiLCJpZ25vcmVBdHRyaWJ1dGVzIiwicmVtb3ZlTlNQcmVmaXgiLCJhbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzIiwicGFyc2VUYWdWYWx1ZSIsInBhcnNlQXR0cmlidXRlVmFsdWUiLCJ0cmltVmFsdWVzIiwiY2RhdGFQcm9wTmFtZSIsIm51bWJlclBhcnNlT3B0aW9ucyIsImhleCIsImxlYWRpbmdaZXJvcyIsImVOb3RhdGlvbiIsInRhZ1ZhbHVlUHJvY2Vzc29yIiwidGFnTmFtZSIsInZhbCIsImF0dHJpYnV0ZVZhbHVlUHJvY2Vzc29yIiwiYXR0ck5hbWUiLCJzdG9wTm9kZXMiLCJhbHdheXNDcmVhdGVUZXh0Tm9kZSIsImlzQXJyYXkiLCJjb21tZW50UHJvcE5hbWUiLCJ1bnBhaXJlZFRhZ3MiLCJwcm9jZXNzRW50aXRpZXMiLCJodG1sRW50aXRpZXMiLCJpZ25vcmVEZWNsYXJhdGlvbiIsImlnbm9yZVBpVGFncyIsInRyYW5zZm9ybVRhZ05hbWUiLCJ0cmFuc2Zvcm1BdHRyaWJ1dGVOYW1lIiwidXBkYXRlVGFnIiwialBhdGgiLCJhdHRycyIsImJ1aWxkT3B0aW9ucyIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js":
/*!*********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js ***!
  \*********************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n///@ts-check\nconst util = __webpack_require__(/*! ../util */ \"(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/util.js\");\nconst xmlNode = __webpack_require__(/*! ./xmlNode */ \"(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js\");\nconst readDocType = __webpack_require__(/*! ./DocTypeReader */ \"(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js\");\nconst toNumber = __webpack_require__(/*! strnum */ \"(rsc)/../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js\");\nconst regx = \"<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)\".replace(/NAME/g, util.nameRegexp);\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\nclass OrderedObjParser {\n    constructor(options){\n        this.options = options;\n        this.currentNode = null;\n        this.tagsNodeStack = [];\n        this.docTypeEntities = {};\n        this.lastEntities = {\n            \"apos\": {\n                regex: /&(apos|#39|#x27);/g,\n                val: \"'\"\n            },\n            \"gt\": {\n                regex: /&(gt|#62|#x3E);/g,\n                val: \">\"\n            },\n            \"lt\": {\n                regex: /&(lt|#60|#x3C);/g,\n                val: \"<\"\n            },\n            \"quot\": {\n                regex: /&(quot|#34|#x22);/g,\n                val: '\"'\n            }\n        };\n        this.ampEntity = {\n            regex: /&(amp|#38|#x26);/g,\n            val: \"&\"\n        };\n        this.htmlEntities = {\n            \"space\": {\n                regex: /&(nbsp|#160);/g,\n                val: \" \"\n            },\n            // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n            // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n            // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n            // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n            // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n            \"cent\": {\n                regex: /&(cent|#162);/g,\n                val: \"\\xa2\"\n            },\n            \"pound\": {\n                regex: /&(pound|#163);/g,\n                val: \"\\xa3\"\n            },\n            \"yen\": {\n                regex: /&(yen|#165);/g,\n                val: \"\\xa5\"\n            },\n            \"euro\": {\n                regex: /&(euro|#8364);/g,\n                val: \"€\"\n            },\n            \"copyright\": {\n                regex: /&(copy|#169);/g,\n                val: \"\\xa9\"\n            },\n            \"reg\": {\n                regex: /&(reg|#174);/g,\n                val: \"\\xae\"\n            },\n            \"inr\": {\n                regex: /&(inr|#8377);/g,\n                val: \"₹\"\n            }\n        };\n        this.addExternalEntities = addExternalEntities;\n        this.parseXml = parseXml;\n        this.parseTextData = parseTextData;\n        this.resolveNameSpace = resolveNameSpace;\n        this.buildAttributesMap = buildAttributesMap;\n        this.isItStopNode = isItStopNode;\n        this.replaceEntitiesValue = replaceEntitiesValue;\n        this.readStopNodeData = readStopNodeData;\n        this.saveTextToParentTag = saveTextToParentTag;\n        this.addChild = addChild;\n    }\n}\nfunction addExternalEntities(externalEntities) {\n    const entKeys = Object.keys(externalEntities);\n    for(let i = 0; i < entKeys.length; i++){\n        const ent = entKeys[i];\n        this.lastEntities[ent] = {\n            regex: new RegExp(\"&\" + ent + \";\", \"g\"),\n            val: externalEntities[ent]\n        };\n    }\n}\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */ function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n    if (val !== undefined) {\n        if (this.options.trimValues && !dontTrim) {\n            val = val.trim();\n        }\n        if (val.length > 0) {\n            if (!escapeEntities) val = this.replaceEntitiesValue(val);\n            const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n            if (newval === null || newval === undefined) {\n                //don't parse\n                return val;\n            } else if (typeof newval !== typeof val || newval !== val) {\n                //overwrite\n                return newval;\n            } else if (this.options.trimValues) {\n                return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n            } else {\n                const trimmedVal = val.trim();\n                if (trimmedVal === val) {\n                    return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n                } else {\n                    return val;\n                }\n            }\n        }\n    }\n}\nfunction resolveNameSpace(tagname) {\n    if (this.options.removeNSPrefix) {\n        const tags = tagname.split(\":\");\n        const prefix = tagname.charAt(0) === \"/\" ? \"/\" : \"\";\n        if (tags[0] === \"xmlns\") {\n            return \"\";\n        }\n        if (tags.length === 2) {\n            tagname = prefix + tags[1];\n        }\n    }\n    return tagname;\n}\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp(\"([^\\\\s=]+)\\\\s*(=\\\\s*(['\\\"])([\\\\s\\\\S]*?)\\\\3)?\", \"gm\");\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n    if (!this.options.ignoreAttributes && typeof attrStr === \"string\") {\n        // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n        //attrStr = attrStr || attrStr.trim();\n        const matches = util.getAllMatches(attrStr, attrsRegx);\n        const len = matches.length; //don't make it inline\n        const attrs = {};\n        for(let i = 0; i < len; i++){\n            const attrName = this.resolveNameSpace(matches[i][1]);\n            let oldVal = matches[i][4];\n            let aName = this.options.attributeNamePrefix + attrName;\n            if (attrName.length) {\n                if (this.options.transformAttributeName) {\n                    aName = this.options.transformAttributeName(aName);\n                }\n                if (aName === \"__proto__\") aName = \"#__proto__\";\n                if (oldVal !== undefined) {\n                    if (this.options.trimValues) {\n                        oldVal = oldVal.trim();\n                    }\n                    oldVal = this.replaceEntitiesValue(oldVal);\n                    const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n                    if (newVal === null || newVal === undefined) {\n                        //don't parse\n                        attrs[aName] = oldVal;\n                    } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {\n                        //overwrite\n                        attrs[aName] = newVal;\n                    } else {\n                        //parse\n                        attrs[aName] = parseValue(oldVal, this.options.parseAttributeValue, this.options.numberParseOptions);\n                    }\n                } else if (this.options.allowBooleanAttributes) {\n                    attrs[aName] = true;\n                }\n            }\n        }\n        if (!Object.keys(attrs).length) {\n            return;\n        }\n        if (this.options.attributesGroupName) {\n            const attrCollection = {};\n            attrCollection[this.options.attributesGroupName] = attrs;\n            return attrCollection;\n        }\n        return attrs;\n    }\n}\nconst parseXml = function(xmlData) {\n    xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n    const xmlObj = new xmlNode(\"!xml\");\n    let currentNode = xmlObj;\n    let textData = \"\";\n    let jPath = \"\";\n    for(let i = 0; i < xmlData.length; i++){\n        const ch = xmlData[i];\n        if (ch === \"<\") {\n            // const nextIndex = i+1;\n            // const _2ndChar = xmlData[nextIndex];\n            if (xmlData[i + 1] === \"/\") {\n                const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\");\n                let tagName = xmlData.substring(i + 2, closeIndex).trim();\n                if (this.options.removeNSPrefix) {\n                    const colonIndex = tagName.indexOf(\":\");\n                    if (colonIndex !== -1) {\n                        tagName = tagName.substr(colonIndex + 1);\n                    }\n                }\n                if (this.options.transformTagName) {\n                    tagName = this.options.transformTagName(tagName);\n                }\n                if (currentNode) {\n                    textData = this.saveTextToParentTag(textData, currentNode, jPath);\n                }\n                //check if last tag of nested tag was unpaired tag\n                const lastTagName = jPath.substring(jPath.lastIndexOf(\".\") + 1);\n                if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {\n                    throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n                }\n                let propIndex = 0;\n                if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {\n                    propIndex = jPath.lastIndexOf(\".\", jPath.lastIndexOf(\".\") - 1);\n                    this.tagsNodeStack.pop();\n                } else {\n                    propIndex = jPath.lastIndexOf(\".\");\n                }\n                jPath = jPath.substring(0, propIndex);\n                currentNode = this.tagsNodeStack.pop(); //avoid recursion, set the parent tag scope\n                textData = \"\";\n                i = closeIndex;\n            } else if (xmlData[i + 1] === \"?\") {\n                let tagData = readTagExp(xmlData, i, false, \"?>\");\n                if (!tagData) throw new Error(\"Pi Tag is not closed.\");\n                textData = this.saveTextToParentTag(textData, currentNode, jPath);\n                if (this.options.ignoreDeclaration && tagData.tagName === \"?xml\" || this.options.ignorePiTags) {} else {\n                    const childNode = new xmlNode(tagData.tagName);\n                    childNode.add(this.options.textNodeName, \"\");\n                    if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {\n                        childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n                    }\n                    this.addChild(currentNode, childNode, jPath);\n                }\n                i = tagData.closeIndex + 1;\n            } else if (xmlData.substr(i + 1, 3) === \"!--\") {\n                const endIndex = findClosingIndex(xmlData, \"-->\", i + 4, \"Comment is not closed.\");\n                if (this.options.commentPropName) {\n                    const comment = xmlData.substring(i + 4, endIndex - 2);\n                    textData = this.saveTextToParentTag(textData, currentNode, jPath);\n                    currentNode.add(this.options.commentPropName, [\n                        {\n                            [this.options.textNodeName]: comment\n                        }\n                    ]);\n                }\n                i = endIndex;\n            } else if (xmlData.substr(i + 1, 2) === \"!D\") {\n                const result = readDocType(xmlData, i);\n                this.docTypeEntities = result.entities;\n                i = result.i;\n            } else if (xmlData.substr(i + 1, 2) === \"![\") {\n                const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n                const tagExp = xmlData.substring(i + 9, closeIndex);\n                textData = this.saveTextToParentTag(textData, currentNode, jPath);\n                //cdata should be set even if it is 0 length string\n                if (this.options.cdataPropName) {\n                    // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n                    // if(!val) val = \"\";\n                    currentNode.add(this.options.cdataPropName, [\n                        {\n                            [this.options.textNodeName]: tagExp\n                        }\n                    ]);\n                } else {\n                    let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n                    if (val == undefined) val = \"\";\n                    currentNode.add(this.options.textNodeName, val);\n                }\n                i = closeIndex + 2;\n            } else {\n                let result = readTagExp(xmlData, i, this.options.removeNSPrefix);\n                let tagName = result.tagName;\n                let tagExp = result.tagExp;\n                let attrExpPresent = result.attrExpPresent;\n                let closeIndex = result.closeIndex;\n                if (this.options.transformTagName) {\n                    tagName = this.options.transformTagName(tagName);\n                }\n                //save text as child node\n                if (currentNode && textData) {\n                    if (currentNode.tagname !== \"!xml\") {\n                        //when nested tag is found\n                        textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n                    }\n                }\n                //check if last tag was unpaired tag\n                const lastTag = currentNode;\n                if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {\n                    currentNode = this.tagsNodeStack.pop();\n                    jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n                }\n                if (tagName !== xmlObj.tagname) {\n                    jPath += jPath ? \".\" + tagName : tagName;\n                }\n                if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n                    let tagContent = \"\";\n                    //self-closing tag\n                    if (tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1) {\n                        i = result.closeIndex;\n                    } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {\n                        i = result.closeIndex;\n                    } else {\n                        //read until closing tag is found\n                        const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n                        if (!result) throw new Error(`Unexpected end of ${tagName}`);\n                        i = result.i;\n                        tagContent = result.tagContent;\n                    }\n                    const childNode = new xmlNode(tagName);\n                    if (tagName !== tagExp && attrExpPresent) {\n                        childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n                    }\n                    if (tagContent) {\n                        tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n                    }\n                    jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n                    childNode.add(this.options.textNodeName, tagContent);\n                    this.addChild(currentNode, childNode, jPath);\n                } else {\n                    //selfClosing tag\n                    if (tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1) {\n                        if (tagName[tagName.length - 1] === \"/\") {\n                            tagName = tagName.substr(0, tagName.length - 1);\n                            tagExp = tagName;\n                        } else {\n                            tagExp = tagExp.substr(0, tagExp.length - 1);\n                        }\n                        if (this.options.transformTagName) {\n                            tagName = this.options.transformTagName(tagName);\n                        }\n                        const childNode = new xmlNode(tagName);\n                        if (tagName !== tagExp && attrExpPresent) {\n                            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n                        }\n                        this.addChild(currentNode, childNode, jPath);\n                        jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n                    } else {\n                        const childNode = new xmlNode(tagName);\n                        this.tagsNodeStack.push(currentNode);\n                        if (tagName !== tagExp && attrExpPresent) {\n                            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n                        }\n                        this.addChild(currentNode, childNode, jPath);\n                        currentNode = childNode;\n                    }\n                    textData = \"\";\n                    i = closeIndex;\n                }\n            }\n        } else {\n            textData += xmlData[i];\n        }\n    }\n    return xmlObj.child;\n};\nfunction addChild(currentNode, childNode, jPath) {\n    const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"]);\n    if (result === false) {} else if (typeof result === \"string\") {\n        childNode.tagname = result;\n        currentNode.addChild(childNode);\n    } else {\n        currentNode.addChild(childNode);\n    }\n}\nconst replaceEntitiesValue = function(val) {\n    if (this.options.processEntities) {\n        for(let entityName in this.docTypeEntities){\n            const entity = this.docTypeEntities[entityName];\n            val = val.replace(entity.regx, entity.val);\n        }\n        for(let entityName in this.lastEntities){\n            const entity = this.lastEntities[entityName];\n            val = val.replace(entity.regex, entity.val);\n        }\n        if (this.options.htmlEntities) {\n            for(let entityName in this.htmlEntities){\n                const entity = this.htmlEntities[entityName];\n                val = val.replace(entity.regex, entity.val);\n            }\n        }\n        val = val.replace(this.ampEntity.regex, this.ampEntity.val);\n    }\n    return val;\n};\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n    if (textData) {\n        if (isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0;\n        textData = this.parseTextData(textData, currentNode.tagname, jPath, false, currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false, isLeafNode);\n        if (textData !== undefined && textData !== \"\") currentNode.add(this.options.textNodeName, textData);\n        textData = \"\";\n    }\n    return textData;\n}\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */ function isItStopNode(stopNodes, jPath, currentTagName) {\n    const allNodesExp = \"*.\" + currentTagName;\n    for(const stopNodePath in stopNodes){\n        const stopNodeExp = stopNodes[stopNodePath];\n        if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;\n    }\n    return false;\n}\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */ function tagExpWithClosingIndex(xmlData, i, closingChar = \">\") {\n    let attrBoundary;\n    let tagExp = \"\";\n    for(let index = i; index < xmlData.length; index++){\n        let ch = xmlData[index];\n        if (attrBoundary) {\n            if (ch === attrBoundary) attrBoundary = \"\"; //reset\n        } else if (ch === '\"' || ch === \"'\") {\n            attrBoundary = ch;\n        } else if (ch === closingChar[0]) {\n            if (closingChar[1]) {\n                if (xmlData[index + 1] === closingChar[1]) {\n                    return {\n                        data: tagExp,\n                        index: index\n                    };\n                }\n            } else {\n                return {\n                    data: tagExp,\n                    index: index\n                };\n            }\n        } else if (ch === \"\t\") {\n            ch = \" \";\n        }\n        tagExp += ch;\n    }\n}\nfunction findClosingIndex(xmlData, str, i, errMsg) {\n    const closingIndex = xmlData.indexOf(str, i);\n    if (closingIndex === -1) {\n        throw new Error(errMsg);\n    } else {\n        return closingIndex + str.length - 1;\n    }\n}\nfunction readTagExp(xmlData, i, removeNSPrefix, closingChar = \">\") {\n    const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);\n    if (!result) return;\n    let tagExp = result.data;\n    const closeIndex = result.index;\n    const separatorIndex = tagExp.search(/\\s/);\n    let tagName = tagExp;\n    let attrExpPresent = true;\n    if (separatorIndex !== -1) {\n        tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, \"\");\n        tagExp = tagExp.substr(separatorIndex + 1);\n    }\n    if (removeNSPrefix) {\n        const colonIndex = tagName.indexOf(\":\");\n        if (colonIndex !== -1) {\n            tagName = tagName.substr(colonIndex + 1);\n            attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n        }\n    }\n    return {\n        tagName: tagName,\n        tagExp: tagExp,\n        closeIndex: closeIndex,\n        attrExpPresent: attrExpPresent\n    };\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */ function readStopNodeData(xmlData, tagName, i) {\n    const startIndex = i;\n    // Starting at 1 since we already have an open tag\n    let openTagCount = 1;\n    for(; i < xmlData.length; i++){\n        if (xmlData[i] === \"<\") {\n            if (xmlData[i + 1] === \"/\") {\n                const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n                let closeTagName = xmlData.substring(i + 2, closeIndex).trim();\n                if (closeTagName === tagName) {\n                    openTagCount--;\n                    if (openTagCount === 0) {\n                        return {\n                            tagContent: xmlData.substring(startIndex, i),\n                            i: closeIndex\n                        };\n                    }\n                }\n                i = closeIndex;\n            } else if (xmlData[i + 1] === \"?\") {\n                const closeIndex = findClosingIndex(xmlData, \"?>\", i + 1, \"StopNode is not closed.\");\n                i = closeIndex;\n            } else if (xmlData.substr(i + 1, 3) === \"!--\") {\n                const closeIndex = findClosingIndex(xmlData, \"-->\", i + 3, \"StopNode is not closed.\");\n                i = closeIndex;\n            } else if (xmlData.substr(i + 1, 2) === \"![\") {\n                const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n                i = closeIndex;\n            } else {\n                const tagData = readTagExp(xmlData, i, \">\");\n                if (tagData) {\n                    const openTagName = tagData && tagData.tagName;\n                    if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== \"/\") {\n                        openTagCount++;\n                    }\n                    i = tagData.closeIndex;\n                }\n            }\n        }\n    } //end for loop\n}\nfunction parseValue(val, shouldParse, options) {\n    if (shouldParse && typeof val === \"string\") {\n        //console.log(options)\n        const newval = val.trim();\n        if (newval === \"true\") return true;\n        else if (newval === \"false\") return false;\n        else return toNumber(val, options);\n    } else {\n        if (util.isExist(val)) {\n            return val;\n        } else {\n            return \"\";\n        }\n    }\n}\nmodule.exports = OrderedObjParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js":
/*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js ***!
  \**************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { buildOptions } = __webpack_require__(/*! ./OptionsBuilder */ \"(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js\");\nconst OrderedObjParser = __webpack_require__(/*! ./OrderedObjParser */ \"(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js\");\nconst { prettify } = __webpack_require__(/*! ./node2json */ \"(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/node2json.js\");\nconst validator = __webpack_require__(/*! ../validator */ \"(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/validator.js\");\nclass XMLParser {\n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */ parse(xmlData, validationOption) {\n        if (typeof xmlData === \"string\") {} else if (xmlData.toString) {\n            xmlData = xmlData.toString();\n        } else {\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\");\n        }\n        if (validationOption) {\n            if (validationOption === true) validationOption = {}; //validate with default options\n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n                throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);\n            }\n        }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if (this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */ addEntity(key, value) {\n        if (value.indexOf(\"&\") !== -1) {\n            throw new Error(\"Entity value can't have '&'\");\n        } else if (key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1) {\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\");\n        } else if (value === \"&\") {\n            throw new Error(\"An entity with value '&' is not permitted\");\n        } else {\n            this.externalEntities[key] = value;\n        }\n    }\n}\nmodule.exports = XMLParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2Zhc3QteG1sLXBhcnNlckA0LjIuNS9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvWE1MUGFyc2VyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLEVBQUVBLFlBQVksRUFBQyxHQUFHQyxtQkFBT0EsQ0FBQywySUFBa0I7QUFDbEQsTUFBTUMsbUJBQW1CRCxtQkFBT0EsQ0FBQywrSUFBb0I7QUFDckQsTUFBTSxFQUFFRSxRQUFRLEVBQUMsR0FBR0YsbUJBQU9BLENBQUMsaUlBQWE7QUFDekMsTUFBTUcsWUFBWUgsbUJBQU9BLENBQUM7QUFFMUIsTUFBTUk7SUFFRkMsWUFBWUMsT0FBTyxDQUFDO1FBQ2hCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsQ0FBQztRQUN6QixJQUFJLENBQUNELE9BQU8sR0FBR1AsYUFBYU87SUFFaEM7SUFDQTs7OztLQUlDLEdBQ0RFLE1BQU1DLE9BQU8sRUFBQ0MsZ0JBQWdCLEVBQUM7UUFDM0IsSUFBRyxPQUFPRCxZQUFZLFVBQVMsQ0FDL0IsT0FBTSxJQUFJQSxRQUFRRSxRQUFRLEVBQUM7WUFDdkJGLFVBQVVBLFFBQVFFLFFBQVE7UUFDOUIsT0FBSztZQUNELE1BQU0sSUFBSUMsTUFBTTtRQUNwQjtRQUNBLElBQUlGLGtCQUFpQjtZQUNqQixJQUFHQSxxQkFBcUIsTUFBTUEsbUJBQW1CLENBQUMsR0FBRywrQkFBK0I7WUFFcEYsTUFBTUcsU0FBU1YsVUFBVVcsUUFBUSxDQUFDTCxTQUFTQztZQUMzQyxJQUFJRyxXQUFXLE1BQU07Z0JBQ25CLE1BQU1ELE1BQU8sQ0FBQyxFQUFFQyxPQUFPRSxHQUFHLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEVBQUVILE9BQU9FLEdBQUcsQ0FBQ0UsSUFBSSxDQUFDLENBQUMsRUFBRUosT0FBT0UsR0FBRyxDQUFDRyxHQUFHLENBQUMsQ0FBQztZQUN2RTtRQUNGO1FBQ0YsTUFBTUMsbUJBQW1CLElBQUlsQixpQkFBaUIsSUFBSSxDQUFDSyxPQUFPO1FBQzFEYSxpQkFBaUJDLG1CQUFtQixDQUFDLElBQUksQ0FBQ2IsZ0JBQWdCO1FBQzFELE1BQU1jLGdCQUFnQkYsaUJBQWlCRyxRQUFRLENBQUNiO1FBQ2hELElBQUcsSUFBSSxDQUFDSCxPQUFPLENBQUNpQixhQUFhLElBQUlGLGtCQUFrQkcsV0FBVyxPQUFPSDthQUNoRSxPQUFPbkIsU0FBU21CLGVBQWUsSUFBSSxDQUFDZixPQUFPO0lBQ3BEO0lBRUE7Ozs7S0FJQyxHQUNEbUIsVUFBVUMsR0FBRyxFQUFFQyxLQUFLLEVBQUM7UUFDakIsSUFBR0EsTUFBTUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFFO1lBQ3pCLE1BQU0sSUFBSWhCLE1BQU07UUFDcEIsT0FBTSxJQUFHYyxJQUFJRSxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUtGLElBQUlFLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRTtZQUN4RCxNQUFNLElBQUloQixNQUFNO1FBQ3BCLE9BQU0sSUFBR2UsVUFBVSxLQUFJO1lBQ25CLE1BQU0sSUFBSWYsTUFBTTtRQUNwQixPQUFLO1lBQ0QsSUFBSSxDQUFDTCxnQkFBZ0IsQ0FBQ21CLElBQUksR0FBR0M7UUFDakM7SUFDSjtBQUNKO0FBRUFFLE9BQU9DLE9BQU8sR0FBRzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9mYXN0LXhtbC1wYXJzZXJANC4yLjUvbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1scGFyc2VyL1hNTFBhcnNlci5qcz80NDFlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgYnVpbGRPcHRpb25zfSA9IHJlcXVpcmUoXCIuL09wdGlvbnNCdWlsZGVyXCIpO1xuY29uc3QgT3JkZXJlZE9ialBhcnNlciA9IHJlcXVpcmUoXCIuL09yZGVyZWRPYmpQYXJzZXJcIik7XG5jb25zdCB7IHByZXR0aWZ5fSA9IHJlcXVpcmUoXCIuL25vZGUyanNvblwiKTtcbmNvbnN0IHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL3ZhbGlkYXRvcicpO1xuXG5jbGFzcyBYTUxQYXJzZXJ7XG4gICAgXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyl7XG4gICAgICAgIHRoaXMuZXh0ZXJuYWxFbnRpdGllcyA9IHt9O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBidWlsZE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIFxuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZSBYTUwgZGF0cyB0byBKUyBvYmplY3QgXG4gICAgICogQHBhcmFtIHtzdHJpbmd8QnVmZmVyfSB4bWxEYXRhIFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3R9IHZhbGlkYXRpb25PcHRpb24gXG4gICAgICovXG4gICAgcGFyc2UoeG1sRGF0YSx2YWxpZGF0aW9uT3B0aW9uKXtcbiAgICAgICAgaWYodHlwZW9mIHhtbERhdGEgPT09IFwic3RyaW5nXCIpe1xuICAgICAgICB9ZWxzZSBpZiggeG1sRGF0YS50b1N0cmluZyl7XG4gICAgICAgICAgICB4bWxEYXRhID0geG1sRGF0YS50b1N0cmluZygpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlhNTCBkYXRhIGlzIGFjY2VwdGVkIGluIFN0cmluZyBvciBCeXRlc1tdIGZvcm0uXCIpXG4gICAgICAgIH1cbiAgICAgICAgaWYoIHZhbGlkYXRpb25PcHRpb24pe1xuICAgICAgICAgICAgaWYodmFsaWRhdGlvbk9wdGlvbiA9PT0gdHJ1ZSkgdmFsaWRhdGlvbk9wdGlvbiA9IHt9OyAvL3ZhbGlkYXRlIHdpdGggZGVmYXVsdCBvcHRpb25zXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRvci52YWxpZGF0ZSh4bWxEYXRhLCB2YWxpZGF0aW9uT3B0aW9uKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoIGAke3Jlc3VsdC5lcnIubXNnfToke3Jlc3VsdC5lcnIubGluZX06JHtyZXN1bHQuZXJyLmNvbH1gIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9yZGVyZWRPYmpQYXJzZXIgPSBuZXcgT3JkZXJlZE9ialBhcnNlcih0aGlzLm9wdGlvbnMpO1xuICAgICAgICBvcmRlcmVkT2JqUGFyc2VyLmFkZEV4dGVybmFsRW50aXRpZXModGhpcy5leHRlcm5hbEVudGl0aWVzKTtcbiAgICAgICAgY29uc3Qgb3JkZXJlZFJlc3VsdCA9IG9yZGVyZWRPYmpQYXJzZXIucGFyc2VYbWwoeG1sRGF0YSk7XG4gICAgICAgIGlmKHRoaXMub3B0aW9ucy5wcmVzZXJ2ZU9yZGVyIHx8IG9yZGVyZWRSZXN1bHQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG9yZGVyZWRSZXN1bHQ7XG4gICAgICAgIGVsc2UgcmV0dXJuIHByZXR0aWZ5KG9yZGVyZWRSZXN1bHQsIHRoaXMub3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIEVudGl0eSB3aGljaCBpcyBub3QgYnkgZGVmYXVsdCBzdXBwb3J0ZWQgYnkgdGhpcyBsaWJyYXJ5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgXG4gICAgICovXG4gICAgYWRkRW50aXR5KGtleSwgdmFsdWUpe1xuICAgICAgICBpZih2YWx1ZS5pbmRleE9mKFwiJlwiKSAhPT0gLTEpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW50aXR5IHZhbHVlIGNhbid0IGhhdmUgJyYnXCIpXG4gICAgICAgIH1lbHNlIGlmKGtleS5pbmRleE9mKFwiJlwiKSAhPT0gLTEgfHwga2V5LmluZGV4T2YoXCI7XCIpICE9PSAtMSl7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbiBlbnRpdHkgbXVzdCBiZSBzZXQgd2l0aG91dCAnJicgYW5kICc7Jy4gRWcuIHVzZSAnI3hEJyBmb3IgJyYjeEQ7J1wiKVxuICAgICAgICB9ZWxzZSBpZih2YWx1ZSA9PT0gXCImXCIpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gZW50aXR5IHdpdGggdmFsdWUgJyYnIGlzIG5vdCBwZXJtaXR0ZWRcIik7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5leHRlcm5hbEVudGl0aWVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBYTUxQYXJzZXI7Il0sIm5hbWVzIjpbImJ1aWxkT3B0aW9ucyIsInJlcXVpcmUiLCJPcmRlcmVkT2JqUGFyc2VyIiwicHJldHRpZnkiLCJ2YWxpZGF0b3IiLCJYTUxQYXJzZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJleHRlcm5hbEVudGl0aWVzIiwicGFyc2UiLCJ4bWxEYXRhIiwidmFsaWRhdGlvbk9wdGlvbiIsInRvU3RyaW5nIiwiRXJyb3IiLCJyZXN1bHQiLCJ2YWxpZGF0ZSIsImVyciIsIm1zZyIsImxpbmUiLCJjb2wiLCJvcmRlcmVkT2JqUGFyc2VyIiwiYWRkRXh0ZXJuYWxFbnRpdGllcyIsIm9yZGVyZWRSZXN1bHQiLCJwYXJzZVhtbCIsInByZXNlcnZlT3JkZXIiLCJ1bmRlZmluZWQiLCJhZGRFbnRpdHkiLCJrZXkiLCJ2YWx1ZSIsImluZGV4T2YiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/node2json.js":
/*!**************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/node2json.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */ function prettify(node, options) {\n    return compress(node, options);\n}\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */ function compress(arr, options, jPath) {\n    let text;\n    const compressedObj = {};\n    for(let i = 0; i < arr.length; i++){\n        const tagObj = arr[i];\n        const property = propName(tagObj);\n        let newJpath = \"\";\n        if (jPath === undefined) newJpath = property;\n        else newJpath = jPath + \".\" + property;\n        if (property === options.textNodeName) {\n            if (text === undefined) text = tagObj[property];\n            else text += \"\" + tagObj[property];\n        } else if (property === undefined) {\n            continue;\n        } else if (tagObj[property]) {\n            let val = compress(tagObj[property], options, newJpath);\n            const isLeaf = isLeafTag(val, options);\n            if (tagObj[\":@\"]) {\n                assignAttributes(val, tagObj[\":@\"], newJpath, options);\n            } else if (Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode) {\n                val = val[options.textNodeName];\n            } else if (Object.keys(val).length === 0) {\n                if (options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n                else val = \"\";\n            }\n            if (compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n                if (!Array.isArray(compressedObj[property])) {\n                    compressedObj[property] = [\n                        compressedObj[property]\n                    ];\n                }\n                compressedObj[property].push(val);\n            } else {\n                //TODO: if a node is not an array, then check if it should be an array\n                //also determine if it is a leaf node\n                if (options.isArray(property, newJpath, isLeaf)) {\n                    compressedObj[property] = [\n                        val\n                    ];\n                } else {\n                    compressedObj[property] = val;\n                }\n            }\n        }\n    }\n    // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n    if (typeof text === \"string\") {\n        if (text.length > 0) compressedObj[options.textNodeName] = text;\n    } else if (text !== undefined) compressedObj[options.textNodeName] = text;\n    return compressedObj;\n}\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for(let i = 0; i < keys.length; i++){\n        const key = keys[i];\n        if (key !== \":@\") return key;\n    }\n}\nfunction assignAttributes(obj, attrMap, jpath, options) {\n    if (attrMap) {\n        const keys = Object.keys(attrMap);\n        const len = keys.length; //don't make it inline\n        for(let i = 0; i < len; i++){\n            const atrrName = keys[i];\n            if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n                obj[atrrName] = [\n                    attrMap[atrrName]\n                ];\n            } else {\n                obj[atrrName] = attrMap[atrrName];\n            }\n        }\n    }\n}\nfunction isLeafTag(obj, options) {\n    const { textNodeName } = options;\n    const propCount = Object.keys(obj).length;\n    if (propCount === 0) {\n        return true;\n    }\n    if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)) {\n        return true;\n    }\n    return false;\n}\nexports.prettify = prettify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2Zhc3QteG1sLXBhcnNlckA0LjIuNS9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvbm9kZTJqc29uLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTQSxTQUFTQyxJQUFJLEVBQUVDLE9BQU87SUFDN0IsT0FBT0MsU0FBVUYsTUFBTUM7QUFDekI7QUFFQTs7Ozs7O0NBTUMsR0FDRCxTQUFTQyxTQUFTQyxHQUFHLEVBQUVGLE9BQU8sRUFBRUcsS0FBSztJQUNuQyxJQUFJQztJQUNKLE1BQU1DLGdCQUFnQixDQUFDO0lBQ3ZCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSixJQUFJSyxNQUFNLEVBQUVELElBQUs7UUFDbkMsTUFBTUUsU0FBU04sR0FBRyxDQUFDSSxFQUFFO1FBQ3JCLE1BQU1HLFdBQVdDLFNBQVNGO1FBQzFCLElBQUlHLFdBQVc7UUFDZixJQUFHUixVQUFVUyxXQUFXRCxXQUFXRjthQUM5QkUsV0FBV1IsUUFBUSxNQUFNTTtRQUU5QixJQUFHQSxhQUFhVCxRQUFRYSxZQUFZLEVBQUM7WUFDbkMsSUFBR1QsU0FBU1EsV0FBV1IsT0FBT0ksTUFBTSxDQUFDQyxTQUFTO2lCQUN6Q0wsUUFBUSxLQUFLSSxNQUFNLENBQUNDLFNBQVM7UUFDcEMsT0FBTSxJQUFHQSxhQUFhRyxXQUFVO1lBQzlCO1FBQ0YsT0FBTSxJQUFHSixNQUFNLENBQUNDLFNBQVMsRUFBQztZQUV4QixJQUFJSyxNQUFNYixTQUFTTyxNQUFNLENBQUNDLFNBQVMsRUFBRVQsU0FBU1c7WUFDOUMsTUFBTUksU0FBU0MsVUFBVUYsS0FBS2Q7WUFFOUIsSUFBR1EsTUFBTSxDQUFDLEtBQUssRUFBQztnQkFDZFMsaUJBQWtCSCxLQUFLTixNQUFNLENBQUMsS0FBSyxFQUFFRyxVQUFVWDtZQUNqRCxPQUFNLElBQUdrQixPQUFPQyxJQUFJLENBQUNMLEtBQUtQLE1BQU0sS0FB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YWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9mYXN0LXhtbC1wYXJzZXJANC4yLjUvbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1scGFyc2VyL25vZGUyanNvbi5qcz9hNTZmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7YXJyYXl9IG5vZGUgXG4gKiBAcGFyYW0ge2FueX0gb3B0aW9ucyBcbiAqIEByZXR1cm5zIFxuICovXG5mdW5jdGlvbiBwcmV0dGlmeShub2RlLCBvcHRpb25zKXtcbiAgcmV0dXJuIGNvbXByZXNzKCBub2RlLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7YXJyYXl9IGFyciBcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFxuICogQHBhcmFtIHtzdHJpbmd9IGpQYXRoIFxuICogQHJldHVybnMgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGNvbXByZXNzKGFyciwgb3B0aW9ucywgalBhdGgpe1xuICBsZXQgdGV4dDtcbiAgY29uc3QgY29tcHJlc3NlZE9iaiA9IHt9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHRhZ09iaiA9IGFycltpXTtcbiAgICBjb25zdCBwcm9wZXJ0eSA9IHByb3BOYW1lKHRhZ09iaik7XG4gICAgbGV0IG5ld0pwYXRoID0gXCJcIjtcbiAgICBpZihqUGF0aCA9PT0gdW5kZWZpbmVkKSBuZXdKcGF0aCA9IHByb3BlcnR5O1xuICAgIGVsc2UgbmV3SnBhdGggPSBqUGF0aCArIFwiLlwiICsgcHJvcGVydHk7XG5cbiAgICBpZihwcm9wZXJ0eSA9PT0gb3B0aW9ucy50ZXh0Tm9kZU5hbWUpe1xuICAgICAgaWYodGV4dCA9PT0gdW5kZWZpbmVkKSB0ZXh0ID0gdGFnT2JqW3Byb3BlcnR5XTtcbiAgICAgIGVsc2UgdGV4dCArPSBcIlwiICsgdGFnT2JqW3Byb3BlcnR5XTtcbiAgICB9ZWxzZSBpZihwcm9wZXJ0eSA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1lbHNlIGlmKHRhZ09ialtwcm9wZXJ0eV0pe1xuICAgICAgXG4gICAgICBsZXQgdmFsID0gY29tcHJlc3ModGFnT2JqW3Byb3BlcnR5XSwgb3B0aW9ucywgbmV3SnBhdGgpO1xuICAgICAgY29uc3QgaXNMZWFmID0gaXNMZWFmVGFnKHZhbCwgb3B0aW9ucyk7XG5cbiAgICAgIGlmKHRhZ09ialtcIjpAXCJdKXtcbiAgICAgICAgYXNzaWduQXR0cmlidXRlcyggdmFsLCB0YWdPYmpbXCI6QFwiXSwgbmV3SnBhdGgsIG9wdGlvbnMpO1xuICAgICAgfWVsc2UgaWYoT2JqZWN0LmtleXModmFsKS5sZW5ndGggPT09IDEgJiYgdmFsW29wdGlvbnMudGV4dE5vZGVOYW1lXSAhPT0gdW5kZWZpbmVkICYmICFvcHRpb25zLmFsd2F5c0NyZWF0ZVRleHROb2RlKXtcbiAgICAgICAgdmFsID0gdmFsW29wdGlvbnMudGV4dE5vZGVOYW1lXTtcbiAgICAgIH1lbHNlIGlmKE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoID09PSAwKXtcbiAgICAgICAgaWYob3B0aW9ucy5hbHdheXNDcmVhdGVUZXh0Tm9kZSkgdmFsW29wdGlvbnMudGV4dE5vZGVOYW1lXSA9IFwiXCI7XG4gICAgICAgIGVsc2UgdmFsID0gXCJcIjtcbiAgICAgIH1cblxuICAgICAgaWYoY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCAmJiBjb21wcmVzc2VkT2JqLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgICBpZighQXJyYXkuaXNBcnJheShjb21wcmVzc2VkT2JqW3Byb3BlcnR5XSkpIHtcbiAgICAgICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldID0gWyBjb21wcmVzc2VkT2JqW3Byb3BlcnR5XSBdO1xuICAgICAgICB9XG4gICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldLnB1c2godmFsKTtcbiAgICAgIH1lbHNle1xuICAgICAgICAvL1RPRE86IGlmIGEgbm9kZSBpcyBub3QgYW4gYXJyYXksIHRoZW4gY2hlY2sgaWYgaXQgc2hvdWxkIGJlIGFuIGFycmF5XG4gICAgICAgIC8vYWxzbyBkZXRlcm1pbmUgaWYgaXQgaXMgYSBsZWFmIG5vZGVcbiAgICAgICAgaWYgKG9wdGlvbnMuaXNBcnJheShwcm9wZXJ0eSwgbmV3SnBhdGgsIGlzTGVhZiApKSB7XG4gICAgICAgICAgY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gPSBbdmFsXTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gIH1cbiAgLy8gaWYodGV4dCAmJiB0ZXh0Lmxlbmd0aCA+IDApIGNvbXByZXNzZWRPYmpbb3B0aW9ucy50ZXh0Tm9kZU5hbWVdID0gdGV4dDtcbiAgaWYodHlwZW9mIHRleHQgPT09IFwic3RyaW5nXCIpe1xuICAgIGlmKHRleHQubGVuZ3RoID4gMCkgY29tcHJlc3NlZE9ialtvcHRpb25zLnRleHROb2RlTmFtZV0gPSB0ZXh0O1xuICB9ZWxzZSBpZih0ZXh0ICE9PSB1bmRlZmluZWQpIGNvbXByZXNzZWRPYmpbb3B0aW9ucy50ZXh0Tm9kZU5hbWVdID0gdGV4dDtcbiAgcmV0dXJuIGNvbXByZXNzZWRPYmo7XG59XG5cbmZ1bmN0aW9uIHByb3BOYW1lKG9iail7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgIGlmKGtleSAhPT0gXCI6QFwiKSByZXR1cm4ga2V5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2lnbkF0dHJpYnV0ZXMob2JqLCBhdHRyTWFwLCBqcGF0aCwgb3B0aW9ucyl7XG4gIGlmIChhdHRyTWFwKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGF0dHJNYXApO1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoOyAvL2Rvbid0IG1ha2UgaXQgaW5saW5lXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgYXRyck5hbWUgPSBrZXlzW2ldO1xuICAgICAgaWYgKG9wdGlvbnMuaXNBcnJheShhdHJyTmFtZSwganBhdGggKyBcIi5cIiArIGF0cnJOYW1lLCB0cnVlLCB0cnVlKSkge1xuICAgICAgICBvYmpbYXRyck5hbWVdID0gWyBhdHRyTWFwW2F0cnJOYW1lXSBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW2F0cnJOYW1lXSA9IGF0dHJNYXBbYXRyck5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc0xlYWZUYWcob2JqLCBvcHRpb25zKXtcbiAgY29uc3QgeyB0ZXh0Tm9kZU5hbWUgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHByb3BDb3VudCA9IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoO1xuICBcbiAgaWYgKHByb3BDb3VudCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKFxuICAgIHByb3BDb3VudCA9PT0gMSAmJlxuICAgIChvYmpbdGV4dE5vZGVOYW1lXSB8fCB0eXBlb2Ygb2JqW3RleHROb2RlTmFtZV0gPT09IFwiYm9vbGVhblwiIHx8IG9ialt0ZXh0Tm9kZU5hbWVdID09PSAwKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMucHJldHRpZnkgPSBwcmV0dGlmeTtcbiJdLCJuYW1lcyI6WyJwcmV0dGlmeSIsIm5vZGUiLCJvcHRpb25zIiwiY29tcHJlc3MiLCJhcnIiLCJqUGF0aCIsInRleHQiLCJjb21wcmVzc2VkT2JqIiwiaSIsImxlbmd0aCIsInRhZ09iaiIsInByb3BlcnR5IiwicHJvcE5hbWUiLCJuZXdKcGF0aCIsInVuZGVmaW5lZCIsInRleHROb2RlTmFtZSIsInZhbCIsImlzTGVhZiIsImlzTGVhZlRhZyIsImFzc2lnbkF0dHJpYnV0ZXMiLCJPYmplY3QiLCJrZXlzIiwiYWx3YXlzQ3JlYXRlVGV4dE5vZGUiLCJoYXNPd25Qcm9wZXJ0eSIsIkFycmF5IiwiaXNBcnJheSIsInB1c2giLCJvYmoiLCJrZXkiLCJhdHRyTWFwIiwianBhdGgiLCJsZW4iLCJhdHJyTmFtZSIsInByb3BDb3VudCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/node2json.js\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js":
/*!************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js ***!
  \************************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nclass XmlNode {\n    constructor(tagname){\n        this.tagname = tagname;\n        this.child = []; //nested tags, text, cdata, comments in order\n        this[\":@\"] = {}; //attributes map\n    }\n    add(key, val) {\n        // this.child.push( {name : key, val: val, isCdata: isCdata });\n        if (key === \"__proto__\") key = \"#__proto__\";\n        this.child.push({\n            [key]: val\n        });\n    }\n    addChild(node) {\n        if (node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n        if (node[\":@\"] && Object.keys(node[\":@\"]).length > 0) {\n            this.child.push({\n                [node.tagname]: node.child,\n                [\":@\"]: node[\":@\"]\n            });\n        } else {\n            this.child.push({\n                [node.tagname]: node.child\n            });\n        }\n    }\n}\nmodule.exports = XmlNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2Zhc3QteG1sLXBhcnNlckA0LjIuNS9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIveG1sTm9kZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BO0lBQ0pDLFlBQVlDLE9BQU8sQ0FBRTtRQUNuQixJQUFJLENBQUNBLE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNDLEtBQUssR0FBRyxFQUFFLEVBQUUsNkNBQTZDO1FBQzlELElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLGdCQUFnQjtJQUNuQztJQUNBQyxJQUFJQyxHQUFHLEVBQUNDLEdBQUcsRUFBQztRQUNWLCtEQUErRDtRQUMvRCxJQUFHRCxRQUFRLGFBQWFBLE1BQU07UUFDOUIsSUFBSSxDQUFDRixLQUFLLENBQUNJLElBQUksQ0FBRTtZQUFDLENBQUNGLElBQUksRUFBRUM7UUFBSTtJQUMvQjtJQUNBRSxTQUFTQyxJQUFJLEVBQUU7UUFDYixJQUFHQSxLQUFLUCxPQUFPLEtBQUssYUFBYU8sS0FBS1AsT0FBTyxHQUFHO1FBQ2hELElBQUdPLElBQUksQ0FBQyxLQUFLLElBQUlDLE9BQU9DLElBQUksQ0FBQ0YsSUFBSSxDQUFDLEtBQUssRUFBRUcsTUFBTSxHQUFHLEdBQUU7WUFDbEQsSUFBSSxDQUFDVCxLQUFLLENBQUNJLElBQUksQ0FBRTtnQkFBRSxDQUFDRSxLQUFLUCxPQUFPLENBQUMsRUFBRU8sS0FBS04sS0FBSztnQkFBRSxDQUFDLEtBQUssRUFBRU0sSUFBSSxDQUFDLEtBQUs7WUFBQztRQUNwRSxPQUFLO1lBQ0gsSUFBSSxDQUFDTixLQUFLLENBQUNJLElBQUksQ0FBRTtnQkFBRSxDQUFDRSxLQUFLUCxPQUFPLENBQUMsRUFBRU8sS0FBS04sS0FBSztZQUFDO1FBQ2hEO0lBQ0Y7QUFDRjtBQUdBVSxPQUFPQyxPQUFPLEdBQUdkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9mYXN0LXhtbC1wYXJzZXJANC4yLjUvbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1scGFyc2VyL3htbE5vZGUuanM/ZGI1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNsYXNzIFhtbE5vZGV7XG4gIGNvbnN0cnVjdG9yKHRhZ25hbWUpIHtcbiAgICB0aGlzLnRhZ25hbWUgPSB0YWduYW1lO1xuICAgIHRoaXMuY2hpbGQgPSBbXTsgLy9uZXN0ZWQgdGFncywgdGV4dCwgY2RhdGEsIGNvbW1lbnRzIGluIG9yZGVyXG4gICAgdGhpc1tcIjpAXCJdID0ge307IC8vYXR0cmlidXRlcyBtYXBcbiAgfVxuICBhZGQoa2V5LHZhbCl7XG4gICAgLy8gdGhpcy5jaGlsZC5wdXNoKCB7bmFtZSA6IGtleSwgdmFsOiB2YWwsIGlzQ2RhdGE6IGlzQ2RhdGEgfSk7XG4gICAgaWYoa2V5ID09PSBcIl9fcHJvdG9fX1wiKSBrZXkgPSBcIiNfX3Byb3RvX19cIjtcbiAgICB0aGlzLmNoaWxkLnB1c2goIHtba2V5XTogdmFsIH0pO1xuICB9XG4gIGFkZENoaWxkKG5vZGUpIHtcbiAgICBpZihub2RlLnRhZ25hbWUgPT09IFwiX19wcm90b19fXCIpIG5vZGUudGFnbmFtZSA9IFwiI19fcHJvdG9fX1wiO1xuICAgIGlmKG5vZGVbXCI6QFwiXSAmJiBPYmplY3Qua2V5cyhub2RlW1wiOkBcIl0pLmxlbmd0aCA+IDApe1xuICAgICAgdGhpcy5jaGlsZC5wdXNoKCB7IFtub2RlLnRhZ25hbWVdOiBub2RlLmNoaWxkLCBbXCI6QFwiXTogbm9kZVtcIjpAXCJdIH0pO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy5jaGlsZC5wdXNoKCB7IFtub2RlLnRhZ25hbWVdOiBub2RlLmNoaWxkIH0pO1xuICAgIH1cbiAgfTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBYbWxOb2RlOyJdLCJuYW1lcyI6WyJYbWxOb2RlIiwiY29uc3RydWN0b3IiLCJ0YWduYW1lIiwiY2hpbGQiLCJhZGQiLCJrZXkiLCJ2YWwiLCJwdXNoIiwiYWRkQ2hpbGQiLCJub2RlIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/fast-xml-parser@4.2.5/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js\n");

/***/ })

};
;