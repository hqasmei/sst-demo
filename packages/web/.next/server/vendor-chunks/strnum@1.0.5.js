"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/strnum@1.0.5";
exports.ids = ["vendor-chunks/strnum@1.0.5"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js ***!
  \***************************************************************************/
/***/ ((module) => {

eval("\nconst hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\nconst consider = {\n    hex: true,\n    leadingZeros: true,\n    decimalPoint: \".\",\n    eNotation: true\n};\nfunction toNumber(str, options = {}) {\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n    options = Object.assign({}, consider, options);\n    if (!str || typeof str !== \"string\") return str;\n    let trimmedStr = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n    if (options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    } else {\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if (match) {\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            const eNotation = match[4] || match[6];\n            if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else {\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if (numStr.search(/[eE]/) !== -1) {\n                    if (options.eNotation) return num;\n                    else return str;\n                } else if (eNotation) {\n                    if (options.eNotation) return num;\n                    else return str;\n                } else if (trimmedStr.indexOf(\".\") !== -1) {\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if (numStr === \"0\" && numTrimmedByZeros === \"\") return num; //0.0\n                    else if (numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if (sign && numStr === \"-\" + numTrimmedByZeros) return num;\n                    else return str;\n                }\n                if (leadingZeros) {\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if (numTrimmedByZeros === numStr) return num;\n                    else if (sign + numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n                if (trimmedStr === numStr) return num;\n                else if (trimmedStr === sign + numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n                // }\n                return str;\n            }\n        // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n        } else {\n            return str;\n        }\n    }\n}\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */ function trimZeros(numStr) {\n    if (numStr && numStr.indexOf(\".\") !== -1) {\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if (numStr === \".\") numStr = \"0\";\n        else if (numStr[0] === \".\") numStr = \"0\" + numStr;\n        else if (numStr[numStr.length - 1] === \".\") numStr = numStr.substr(0, numStr.length - 1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/strnum@1.0.5/node_modules/strnum/strnum.js\n");

/***/ })

};
;